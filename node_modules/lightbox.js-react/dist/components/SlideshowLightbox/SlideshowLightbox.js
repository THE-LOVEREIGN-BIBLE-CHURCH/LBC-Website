"use client";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/SlideshowLightbox/SlideshowLightbox.tsx
var SlideshowLightbox_exports = {};
__export(SlideshowLightbox_exports, {
  SlideshowLightbox: () => SlideshowLightbox
});
module.exports = __toCommonJS(SlideshowLightbox_exports);
var React = __toESM(require("react"));
var import_react2 = require("react");
var import_framer_motion = require("framer-motion");

// esbuild-css-modules-plugin-namespace:C:\Users\silvi\AppData\Local\Temp\tmp-19428-P71xofXfMp6H\lightbox.js-react\src\components\SlideshowLightbox\SlideshowLightbox.module.css.js
var digest = "9a57293f54760bc800cb375f343bca5b1f6e9869947ba8aba23cd5dc1f106aa8";
var css = `._lightboxjs_5wij0_1 {
  margin: 0;
  padding: 0;
}

._lightboxjs_5wij0_1 * {
  box-sizing: border-box;
}

/* .lightboxjs img,
.lightboxjs svg,
.lightboxjs video {
  display: block;
  vertical-align: middle;
  height: auto;
  max-width: 100%;
} */

._slideshowBtn_5wij0_37 {
  padding-bottom: 2px;
}

._closeIcon_5wij0_45:hover,
._closeIcon_5wij0_45:focus,
._iconsHeader_5wij0_49 svg:hover,
._iconsHeader_5wij0_49 svg:focus,
._prev1_5wij0_53 span:hover,
._next1_5wij0_55:hover,
._icon_5wij0_49:hover {
  text-decoration: none;
  cursor: pointer;
  /* color: rgb(230, 230, 230); */
}

._prevIcon_5wij0_69:hover,
._nextIcon_5wij0_71:hover {
  background-color: rgba(0, 0, 0, 0.8);
  color: rgb(230, 230, 230);
}

._show_5wij0_81 {
  display: flex;
}

._displayHidden_5wij0_89 {
  display: none;
}

._thumbnail_5wij0_97 {
  opacity: 1;
  transition: all 0.3s;
  cursor: pointer;
  position: relative;
}

._next1_5wij0_55 {
  right: 1%;
  padding-left: 2vw;
  padding-right: 3vw;
}

._prev1_5wij0_53 {
  left: 2%;
  padding-right: 2vw;
}

._thumbnails_5wij0_133 {
  transition: border 0.3s;
}

._thumbnail_5wij0_97 {
  display: inline;
}

._thumbnailsWithCaption_5wij0_149 {
  width: 90%;
}

._thumbnailsOuterContainer_5wij0_157 {
  position: absolute;
  bottom: 4%;
  height: 5vh;
  width: 100vw;
  z-index: 10000000;
  margin-top: 10px;
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
}

._navigationDots_5wij0_181 {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

/* Mobile screens */
@media screen and (min-width: 20em) {
  ._imageSlide_5wij0_197 {
    height: 67vw;
    width: 60%;
  }

  ._thumbnailsOuterContainer_5wij0_157 {
    position: absolute;
    bottom: 7%;
    width: 100vw;
    /* width: 100%; */
  }

  ._thumbnailsAndCaption_5wij0_221 {
    height: 23vh;
    bottom: 2%;

  }

  ._hideControlsBar_5wij0_233 ._slideshowImg_5wij0_233 {
    /* height: 100vh; */
  }

  ._rotateImgInnerContainer_5wij0_241 {
    top: 8%;
  }

  ._hideControlsBar_5wij0_233 ._slideshowInnerContainer_5wij0_249 {
    top: 0;
  }

  ._thumbnail_5wij0_97 {
    width: 80px;
    max-width: 80px;
    height: 7vh;
  }

  ._videoThumbnailsOuterContainer_5wij0_269 {
    bottom: 2%;
  }

  ._imgTitleContainer_5wij0_277 {
    padding-bottom: 16px;
    width: 100vw;
    margin-top: 0;
    margin-bottom: 0;
  }

  ._thumbnails_5wij0_133 {
    margin-left: auto;
    margin-right: auto;
  }

  ._next1_5wij0_55 {
    right: 0.9%;
  }

  ._prev1_5wij0_53 {
    left: 1.5%;
  }
}

._thumbnail_5wij0_97 {
  height: 5vh;
  border-radius: 6px;
  margin-right: 7px;
  object-fit: cover;
}



._thumbnailsOuterContainerMetadata_5wij0_337 {
  width: 78vw;
}

._videoThumbnailsOuterContainer_5wij0_269 {
  bottom: 5%;
}

._thumbnailsAndCaption_5wij0_221 {
  height: 19vh;
}

._htmlVideoOuterContainer_5wij0_361 video {
  height: 100%;
  max-height: 70vh;
  width: 100%;
}

._caption_5wij0_373 {
  position: absolute;
  bottom: 14%;
  width: 100vw;
  z-index: 10000000;
  margin-top: 10px;
  margin-left: auto;
  margin-right: auto;
}

._galleryImg_5wij0_393 {
  cursor: pointer;
  margin: 0.2em;
}

._modalContainer_5wij0_403 {
  width: 100vw;
  /* height: 100%;
  max-height: 100%; */
  direction: ltr;
  overflow: hidden;
  touch-action: none;
  padding: 0;
  overflow-y: hidden;
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000000;
}

._slideshowAnimContainer_5wij0_441 {
  /* height: 100%;
  max-height: 100%; */
  direction: ltr;
  overflow: hidden;
  touch-action: none;
  padding: 0;
  overflow-y: hidden;
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  /* position: fixed; */
  top: 0;
  left: 0;
  z-index: 1000000;
}

._fullScreenContainer_5wij0_477 img {
  height: 100vh;
  max-width: 100%;
  /* max-height: 100vh; */
}

._imageInnerContainer_5wij0_489 img {
  height: 80vh;
  max-width: 100%;
  max-height: 100%;
}

._imageInnerContainer_5wij0_489 {
  position: fixed;
  display: flex;
  flex-direction: column;
  justify-content: center;
  top: 0;
  align-content: center;
  margin-left: auto;
  margin-right: auto;
  text-align: center;
  z-index: 1000000;
}

._magnifyWrapper_5wij0_527 {
  margin-bottom: 3em;
  margin-left: auto;
  margin-right: auto;
}

._slideshowInnerContainer_5wij0_249 {
  position: fixed; 
  display: flex;
  flex-direction: column;
  justify-content: center;
  transition: top 0.2s ease-in-out 0s;
  top: 12%;
  align-content: center;
  margin-left: auto;
  margin-right: auto;
  text-align: center;
  z-index: 1000000;
}

._slideshowInnerVideoContainer_5wij0_567 {
  top: 6%;
}

._slideshowInnerContainerThumbnails_5wij0_575 {
  top: 12%;
}

._hideControlsBar_5wij0_233  {
  top: 0;
}

._fullScreenContainer_5wij0_477 {
  top: 0;
}

._lightboxContainer_5wij0_599 {
  width: 100%;
  height: 100%;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
}

._next1_5wij0_55,
._prev1_5wij0_53 {
  top: calc(50% - 20px);
  position: absolute;
  display: flex;
  transition: all 0.2s;
  justify-content: center;
  align-items: center;
  padding-bottom: 2vh;
  padding-top: 2vh;
  user-select: none;
  cursor: pointer;
  font-weight: bold;
  border-radius: 30px;
  width: 40px;
  height: 40px;
  font-size: 18px;
  z-index: 10000000;
}



._next1_5wij0_55:hover,
._prev1_5wij0_53:hover {
  color: rgb(230, 230, 230);
}

._slideshowAnimImg_5wij0_671 {
  position: absolute;
  max-width: 100vw;
}

._controls_5wij0_681 {
  display: flex;
  flex-direction: row;
  align-items: center;
}

._iconsHeader_5wij0_49 {
  color: white;
  position: absolute;
  display: flex;
  flex-direction: row;
  /* align-items: center;
    justify-content: center; */
  cursor: pointer;
  top: 10px;
  right: 45px;
  z-index: 999999999;
  /* padding: 0.14vw; */
}

._ytVideo_5wij0_721 {
  aspect-ratio: 16 / 9;
  height: 65vh;
  width: 100%;
}

._videoOuterContainer_5wij0_733 {
  width: 65%;
  margin-left: auto;
  margin-right: auto;
  height: 60vh;
  max-height: 65vh;
}

._htmlVideoOuterContainer_5wij0_361 {
  width: 80%;
  margin-left: auto;
  margin-right: auto;
}

._customVideoContainer_5wij0_761, ._customEmbedContainer_5wij0_761 {
  margin-left: auto;
  margin-right: auto;
}

._videoIconsHeader_5wij0_771 {
  position: fixed;
  top: 4%;
  right: 3%;
}

._lightbox_5wij0_1 ._iconsHeader_5wij0_49 svg {
  transition: 0.3s all;
}

._iconsHeader_5wij0_49 svg:active {
  transform: scale(0.97);
}

._imgTitle_5wij0_277 {
  text-align: center;
  width: 80%;
  margin-left: auto;
  margin-right: auto;
}

._iconsHeader_5wij0_49 svg {
  margin-left: 0.6em;
  padding: 0.2em;
  transition: all 0.1s;
  /* width: 32px;  */
  /* font-size: 18px; */
  line-height: 16px;
  vertical-align: baseline;
}

._icon_5wij0_49 {
  /* width: 32px;  */
}

@media screen and (min-width: 6em) {
  ._iconsHeader_5wij0_49 {
    top: 3%;
  }

  ._slideshowAnimContainer_5wij0_441 {
    width: 100vw;
  }

  ._iconsHeader_5wij0_49 svg {
    /* width: 34px;  */
    padding-right: 0.3em;
  }

  ._lightboxjs_5wij0_1 img {
    cursor: pointer;
  }

  ._thumbnail_5wij0_97 {
    height: 9vh;
    /* width: 22vw; */
  }

  ._next1_5wij0_55 {
    top: calc(48% - 20px);
  }

  ._prev1_5wij0_53 {
    top: calc(48% - 20px);

  }


}

@media screen and (min-width: 39em) {
  ._slideshowAnimContainer_5wij0_441 {
    width: 100vw;
  }

  ._slideshowInnerContainer_5wij0_249 {
    /* width: 100vw;
    height: 95vh;
    position: absolute; */
  }

  ._imgTitleContainer_5wij0_277 {
    padding-bottom: 0px;
  }
  

  ._next1_5wij0_55 {
    right: 0.7%;
  }

  /* .thumbnailsOuterContainer {
    bottom: 10%;
  } */

  /* .hideControlsBar .slideshow_img {
    height: 70vh;

  }

  .hideControlsBar {
    top: 10%;
  } */

  ._fullScreenContainer_5wij0_477 {
    width: 100vw;
    /* height: 100vh; */
  }

  ._fullScreenContainer_5wij0_477 img {
    height: 100vh;
  }

  ._thumbnails_5wij0_133 {
    margin-top: 0.6em;
  }

  ._thumbnail_5wij0_97 {
    /* height: 8vh; */
    width: 80px;
    max-width: 80px;
  }

  ._iconsHeader_5wij0_49 svg {
    /* width: 32px; 
      font-size: 32px; */
  }

  ._prev1_5wij0_53 {
    left: 2.7%;
    padding-right: 2vw;
  }
}

/* Desktop screens */
@media screen and (min-width: 42em) {
  ._imageSlide_5wij0_197 {
    height: 70vh;
    width: 80vw;
  }

  ._innerContainerWithTopCaption_5wij0_1051 {
    top: 8%;
  }

  ._slideshowImgFullscreen_5wij0_1059 {
    display: grid;
    width: 92vw;
    place-items: start;
    margin-left: auto;
    margin-right: auto;
    scrollbar-gutter: stable both-edges;
  }

  ._thumbnailsAndCaption_5wij0_221 {
    bottom: 0%;
  }
  
  ._rotateImgInnerContainer_5wij0_241 {
    top: 2%;
  }

  ._slideshowInnerContainer_5wij0_249 img {
    margin-top: 0vh;
    /* width: 70vw; */
  }

  ._fullScreenContainer_5wij0_477 img {
    width: 80vw;
  }

  ._slideshowInnerContainerFullScreen_5wij0_1111 {
    top: 0%;
  }

  ._fullScreenLightboxImg_5wij0_1119 {
    margin-left: auto;
    margin-right: auto;
    height: 100vh;
  }

  ._slideshowInnerContainerImgMetadata_5wij0_1131 {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content: flex-start;
  }

  ._slideshowInnerContainerFullScreen_5wij0_1111 {
    height: 100vh;
    width: 100vw;
    position: absolute;
  }

  ._slideshowInnerContainerFullScreen_5wij0_1111 img {
    object-fit: contain;
  }

  ._thumbnails_5wij0_133 {
    scrollbar-width: none;
    -ms-overflow-style: none;
    margin-top: 1.1em;
  }

  ._thumbnails_5wij0_133::-webkit-scrollbar {
    display: none; /* Safari and Chrome */
  }

  ._opacity-fade_5wij0_1185 {
    transition: opacity 0.3s;
    -webkit-transition: opacity 0.3s;
    opacity: 1;
  }

  ._thumbnailsOuterContainer_5wij0_157 {
    margin-top: 0.1em;
    padding-top: 0.3em;
    height: 5vh;
    bottom: 11%;
  }

  ._thumbnailsAndCaption_5wij0_221 {
    bottom: 0%;
  }

  ._thumbnail_5wij0_97,
  ._imageSliderThumbnails_5wij0_1221 img {
    height: 10vh;
    /* width: 7em; */
  }

  ._slideshowAnimContainer_5wij0_441 {
    width: 100vw;
  }

  /* .slideshowInnerContainer {
    width: 100vw;
    height: 95vh;
  } */

  ._hideControlsBar_5wij0_233 {
    /* height: 100vh; */
  }

  ._fullScreenContainer_5wij0_477 {
    width: 100vw;
    /* height: 100vh; */
  }

  ._iconsHeader_5wij0_49 svg {
    /* width: 37px;
      font-size: 34px; */
  }

  ._prev1_5wij0_53 {
    left: 2%;
    padding-right: 2vw;
  }

  ._next1_5wij0_55 {
    right: 0.4%;
  }

  
  ._slideshowImgMetadata_5wij0_1297 {
    width: 78vw;
  }

  ._prev1Metadata_5wij0_1305 {
    left: 1%;
  }

  ._navigationDots_5wij0_181 {
    gap: 8px;
  }

 
}

@media screen and (min-width: 53em) {
  
  ._slideshowImg_5wij0_233 {
    display: grid;
    width: 100vw;
    height: 70vh;
    place-items: start;
    /* margin-top: 7vh; */
  }

  ._slideshowImgWithCaption_5wij0_1347 {
    height: 68vh;
  }

  ._hideControlsBar_5wij0_233 ._slideshowImg_5wij0_233, ._hideControlsBarAndCaption_5wij0_1355 ._slideshowImg_5wij0_233  {
    padding-top: 12vh;
  }

  ._fullScreenContainer_5wij0_477 ._slideshowImg_5wij0_233 {
    padding-top: 0vh;
  }


  ._lightboxImg_5wij0_1373 {
      /* height: 70vh; */
  }

  ._thumbnail_5wij0_97 {
    width: 95px;
    max-width: 80px;
  } 

  ._slideshowImgMetadata_5wij0_1297 {
    width: 78vw;
  }
}
  

@media screen and (min-width: 80em) {
  ._slideshowInnerContainer_5wij0_249 img {
    /* width: 60vw; */
  }

  ._fullScreenContainer_5wij0_477 img {
    width: 80vw;
  }
}

._lightIcon_5wij0_1423,
._lightIcon_5wij0_1423 svg {
  background-color: white;
  color: black;
}

._lightIcon_5wij0_1423:hover,
._lightIcon_5wij0_1423 svg:hover {
  background-color: white;
  color: black;
  fill: black;
}

._darkIcon_5wij0_1449,
._darkIcon_5wij0_1449 svg {
  background-color: transparent;
  /* background-color: #151515; */
  color: silver;
  fill: silver;
}

._darkIcon_5wij0_1449:hover,
._darkIcon_5wij0_1449 svg:hover {
  color: rgba(107, 107, 107, 0.8);
  fill: rgba(107, 107, 107, 0.8);
}

/* Header icons  */
._lightHeaderIcon_5wij0_1479 svg {
  background-color: white;
  color: black;
  fill: black;
}

._lightHeaderIcon_5wij0_1479 svg:hover {
  background-color: white;
  color: rgb(24, 24, 24, 0.8);
  fill: rgb(24, 24, 24, 0.8);

}

._darkHeaderIcon_5wij0_1505 svg {
  background-color: transparent;
  /* background-color: #151515; */
  color: #626b77;
  fill: #626b77;
}

._darkHeaderIcon_5wij0_1505 svg:hover {
  color: rgba(99, 99, 99, 0.8);
  fill: rgba(99, 99, 99, 0.8);
}

._magnifierImage_5wij0_1529 {
  object-fit: contain;
}

._thumbnails_5wij0_133 ._active_5wij0_1537 {
  border: solid rgb(107, 133, 206) 2px;
}

._inactiveThumbnailBorder_5wij0_1545 {
  border: solid transparent 2px;
}

._thumbnails_5wij0_133 {
  width: 95%;
}

._emblaThumbs_5wij0_1561 {
  --thumbs-slide-spacing: 2px; 
  /* --thumbs-slide-height: 9rem; */
  margin-top: var(--thumbs-slide-spacing);
}

@media screen and (max-width: 40em) {
  /* .innerContainerWithTopCaption {
    position: relative;
  } */

  ._imgTitleContainer_5wij0_277 {
    /* position: absolute;
    top: 12%; */
  }

  ._slideshowImg_5wij0_233 {
    height: 100vh;
  }
}

@media screen and (max-width: 44em) and (min-width: 30em) {
  /* .innerContainerWithTopCaption {
    position: relative;
  } */
  ._thumbnailsOuterContainer_5wij0_157 {
    bottom: 11%;
  }

  ._thumbnailsAndCaption_5wij0_221 {
    bottom: 4%;
  }
  
  ._imgTitleContainer_5wij0_277 {
    /* position: absolute;
    top: 5%; */
  }
}

@media screen and (max-width: 46em) and (min-width: 30em) {
  /* .innerContainerWithTopCaption {
    position: relative;
  } */

  /* .imgTitleContainer {
    position: absolute;
    top: 7%;
  } */
}

@media screen and (max-width: 49em) and (min-width: 45em) {
  /* .innerContainerWithTopCaption {
    position: relative;
  } */

  /* .imgTitleContainer {
    position: absolute;
    top: 5%;
  } */
}

@media screen and (max-width: 29em) {
  ._fullScreenContainer_5wij0_477 img {
    object-fit: cover;
  }

  ._emblaThumbs_5wij0_1561 {
    --thumbs-slide-spacing: 3px; 
    /* --thumbs-slide-height: 9rem; */
    margin-top: var(--thumbs-slide-spacing);
  }



  ._htmlVideo_5wij0_361 {
    margin-top: 5vh;
  }

  ._thumbnails_5wij0_133 {
    width: 98%;
  }

  ._thumbnail_5wij0_97 {
    width: 80px;
    max-width: 80px;
  }

  ._htmlVideoOuterContainer_5wij0_361 video {
    max-height: 65vh;
  }

  ._videoIconsHeader_5wij0_771 {
    position: fixed;
    top: 2%;
    right: 15px;
  }

  ._videoOuterContainer_5wij0_733 {
    width: 88%;
    margin-left: auto;
    margin-right: auto;
    height: 100%;
    max-height: 65vh;
  }

  ._htmlVideoOuterContainer_5wij0_361 {
    width: 94%;
    margin-left: auto;
    margin-right: auto;
  }

  ._iconsHeader_5wij0_49 {
    position: fixed;
    left: 115px;
  }

  ._slideshowInnerVideoContainer_5wij0_567 {
    top: 3%;
  }

  ._next1_5wij0_55,
  ._prev1_5wij0_53 {
    padding-bottom: 2vh;
    padding-top: 2vh;
  }

  ._next1_5wij0_55 {
    padding-left: 4vw;
  }

  ._prev1_5wij0_53 {
    padding-right: 4vw;
  }

  ._iconsHeader_5wij0_49 {
    /* font-size: 28px; */
  }

}

@media screen and (max-width: 53em) {
  ._slideshowImg_5wij0_233 {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    width: 100vw;
    height: 70vh;
  }

  ._slideshowImg_5wij0_233 img {
    margin-left: auto;
    margin-right: auto;
  }

  ._slideshowInnerContainerFullScreen_5wij0_1111 {
    position: fixed;
    display: flex;
    flex-direction: column;
    justify-content: center;
    transition: top 0.2s ease-in-out 0s;
    top: 10%;
    align-content: center;
    margin-left: auto;
    margin-right: auto;
    text-align: center;
    z-index: 1000000;
  }

  ._containImg_5wij0_1899 {
    object-fit: contain;
  }
}

._fullScreenContainer_5wij0_477 img {
  object-fit: contain;
  width: 100%;
  height: 100%;
}

._thumbnails_5wij0_133 {
  text-align: center;
  white-space: nowrap;
}

._reactTransformComponent_5wij0_1931 {
  margin-left: auto;
  margin-right: auto;
}

._magnifierImage_5wij0_1529 {
  margin-left: auto;
  margin-right: auto;
}

/* CSS loader  */
._loader_5wij0_1953 {
  width: 44px;
  height: 44px;
  box-sizing: border-box;

  border-radius: 50%;

  display: inline-block;
  position: fixed;
  top: 50%;
  left: 50%;
  animation: _rotation_5wij0_1 1s linear infinite;
}

@keyframes _rotation_5wij0_1 {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

._dayLoader_5wij0_1999 {
  border: 5px solid #626b77;
  border-bottom-color: transparent;
}

._nightLoader_5wij0_2009 {
  border: 5px solid #fff;
  border-bottom-color: transparent;
}

._lightboxImg_5wij0_1373 {
  max-height: 70vh;
  margin-left: auto;
  margin-right: auto;
}

._controls_5wij0_681 button, ._closeButton_5wij0_2031, ._closeButtonRounded_5wij0_2031 {
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
  font-size: 16px;
}

._controls_5wij0_681 svg {
  box-sizing: border-box;
}

._closeButton_5wij0_2031 svg, ._closeButtonRounded_5wij0_2031 svg {
  box-sizing: border-box;
  font-size: 16px;
  padding-top: 0.5px;
}

._closeButton_5wij0_2031 {
  padding-top: 3px;
}

._closeButtonRounded_5wij0_2031 {
  cursor: pointer;

}

._closeButtonRounded_5wij0_2031 svg {
  margin: 0;
  padding: 5px;
  background-color: black;
  border-color: transparent;
  border-radius: 28px;

}

._thumbnailsAndCaption_5wij0_221 {
  height: 19vh;
  margin-top: 0em;
  width: 100vw;
}

._thumbnailsWithCaption_5wij0_149 {
  margin-top: 0em;
}

._slideImageAndCaption_5wij0_2123 {
  top: 9%;
}

._slideImageAndCaption_5wij0_2123._hideControlsBar_5wij0_233 {
  top: 0;
}

._slideshowAnimContainer_5wij0_441 {
  -ms-overflow-style: none;
  /* scrollbar-width: none;   */
}
._thumbnails_5wij0_133::-webkit-scrollbar {
  display: none;
}

._roundedBorder_5wij0_2155 {
  border-radius: 20px;
}

._maxWidthFull_5wij0_2163 {
  max-width: 100%;
}

._maxWidthWithoutMagnifier_5wij0_2171 {
  max-width: 80%;
}

@media screen and (max-width: 880px) {
  ._iconsHeader_5wij0_49 {
    position: fixed;
    right: 5%;
  }
}

@media screen and (max-width: 480px) {
  ._iconsHeader_5wij0_49 {
    position: fixed;
    left: 180px;
  }
  
}

@media screen and (max-width: 440px) {
  ._iconsHeader_5wij0_49 {
    position: fixed;
    left: 160px;
  }
}

@media screen and (max-width: 410px) {
  ._iconsHeader_5wij0_49 {
    position: fixed;
    left: 140px;
  }
}

@media screen and (max-width: 385px) {
  ._iconsHeader_5wij0_49 {
    position: fixed;
    left: 135px;
    /* top: 24px; */
  }
}

@media screen and (max-width: 365px) {
  ._iconsHeader_5wij0_49 {
    position: fixed;
    left: 90px;
  }
}

@media screen and (max-width: 345px) {
  ._iconsHeader_5wij0_49 {
    position: fixed;
    left: 82px;
  }
}

@media screen and (max-width: 325px) {
  ._iconsHeader_5wij0_49 {
    position: fixed;
    left: 60px;
  }
}

@media screen and (max-width: 300px) {
  ._iconsHeader_5wij0_49 {
    position: fixed;
    left: 30px;
  }
}

._lightboxVideo_5wij0_2309 {
  margin-left: auto;
  margin-right: auto;
}

._navigation-wrapper_5wij0_2319 {
  position: relative;
}

._dots_5wij0_2327 {
  display: flex;
  padding: 10px 0;
  justify-content: center;
}

._dot_5wij0_2327 {
  border: none;
  width: 10px;
  height: 10px;
  background: #c5c5c5;
  border-radius: 50%;
  margin: 0 5px;
  padding: 5px;
  cursor: pointer;
}

._dot_5wij0_2327:focus {
  outline: none;
}

._dot_5wij0_2327._active_5wij0_1537 {
  background: #000;
}

._arrow_5wij0_2377 {
  position: absolute;
  top: 50%;
  font-size: 24px;
  font-weight: bold;
  transition: all 0.2s;
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  color: #fff;
  cursor: pointer;
  padding-top: 10px;
  padding-bottom: 10px;
  font-family: sans-serif;
}

._leftArrow_5wij0_2407 {
  left: 8px;
  padding-right: 10px;
  padding-top: 30px;
  padding-bottom: 30px;
}

._rightArrow_5wij0_2421 {
  left: auto;
  right: 8px;
  padding-left: 10px;
  padding-top: 30px;
  padding-bottom: 30px;
}

._arrow_5wij0_2377:hover {
  color: rgb(230, 230, 230);
}

._arrow--disabled_5wij0_2445,
._arrow--disabled_5wij0_2445:hover {
  color: rgba(255, 255, 255, 0.5);
}

._navDotsMargin_5wij0_2455 {
  margin-top: 12px;
}

._inactiveThumbnailBorderImgSlider_5wij0_2463 {
  border: 'solid transparent 2px';
}

._ytVideoImgSlider_5wij0_2471 {
  width: 100%;
  height: 100%;
}

._ytVideoImgSlider_5wij0_2471 iframe {
  width: 100%;
  height: 100%;
}

._outerYTVideoImgSlider_5wij0_2491 {
  height: 100%;
}

._lightboxjs_5wij0_1 iframe {
  margin: none;
  padding: none;
  border: none;
}

._imgSliderArrow_5wij0_2511 {
  z-index: 100000;
  background-color: transparent;
  border: none;
}

._thumbnails_5wij0_133 {
  margin-left: auto;
  margin-right: auto;
}

._cursorPointer_5wij0_2533 {
  cursor: pointer;
}

._lightboxjsIcon_5wij0_2541 > * { color: inherit; fill: inherit }

._embla_5wij0_1561 {
  margin-left: auto;
  margin-right: auto;
  --slide-spacing: 1rem;
  --slide-size: 100%;
  --slide-height: 19rem;
}

._emblaViewport_5wij0_2561 {
  overflow: hidden;
  width: 100vw;
}

._emblaContainer_5wij0_2571 {
  backface-visibility: hidden; 
  touch-action: pan-y;
  height: auto;
  margin-left: calc(var(--slide-spacing) * -1);
  display: grid;  
  grid-auto-flow: column;  
  grid-auto-columns: 100%; 
  max-width: 100vw;
  margin-left: auto;
  margin-right: auto; 
  /* width: 80%;
*/
}

._emblaContainerImgMetadata_5wij0_2601 {
  width: 78vw;
  max-width: 78vw;
  height: 80vh;
}

._imgdrag_5wij0_2613 ._emblaSlide_5wij0_2613 {
  flex: 0 0 80%;
  min-width: 0;
  max-width: 100%;
  padding-left: 12px;
  position: relative;
  margin-left: auto;
  margin-right: auto;
}

._emblaThumbsViewport_5wij0_2633 {
  overflow: hidden;
}

._emblaThumbsContainer_5wij0_2641 {
  display: flex;
  flex-direction: row;
  margin-left: calc(var(--thumbs-slide-spacing) * -1);
  width: 100%;
  /* align-items: center;
  text-align: center;
  width: fit-content; */
  /* justify-content: center; */
  
}

._emblaThumbsContainer_5wij0_2641::before, ._emblaThumbsContainer_5wij0_2641::after {
  content: '';  /* Insert pseudo-element */
  margin: auto; /* Make it push flex items to the center */
}


._emblaThumbsSlide_5wij0_2677 {
  /* min-width: 0; */
  padding-left: var(--thumbs-slide-spacing);
  /* position: relative; */
  /* width: 140px; */
}

._emblaThumbsSlideImg_5wij0_2691 {
  /* display: block; */
  height: var(--thumbs-slide-height);
  width: 100%;
  object-fit: cover;
}

._mlAuto_5wij0_2705 {
  margin-left: auto;
}

._metadata_5wij0_2713 {
  color: white;
}

._emblaSlideGrid_5wij0_2721 {
  display: flex;
}

._metadata_5wij0_2713 {
  text-align: left;
  min-width: 17vw;
  max-width: 17vw;
  padding-top: 5vw;
}

._metadataPanel_5wij0_2743 {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
}

._metadataInnerContainer_5wij0_2755 {
  padding-left: 7vw;
}

._metadataInnerContainer_5wij0_2755 span {
  display: block;
}


._imgMetadataCloseBtn_5wij0_2773 {
  position: absolute;
  top: 1%;
  right: 2%;
  background: none;
  color: white;
  border: none;
  cursor: pointer;
}

/* Styling from react-zoom-pan-pinch library */
._reactTransformWrapper_5wij0_2795 {
  position: relative;
  width: -moz-fit-content;
  width: fit-content;
  height: -moz-fit-content;
  height: fit-content;
  overflow: hidden;
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Safari */
  -moz-user-select: none; /* Firefox */
  -khtml-user-select: none; /* Konqueror HTML */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none;
  margin: 0;
  padding: 0;
}

._reactTransformComponent_5wij0_1931 {
  display: flex;
  flex-wrap: wrap;
  width: -moz-fit-content;
  width: fit-content;
  height: -moz-fit-content;
  height: fit-content;
  margin: 0;
  padding: 0;
  transform-origin: 0% 0%;
}

._reactTransformComponent_5wij0_1931 img {
  pointer-events: none;
}

._navigationDot_5wij0_181 {
  height: 10px;
  width: 10px;
  background-color: silver;
  border-radius: 8px;
  border: none;
  cursor: pointer;
}

._navigationDotContainer_5wij0_2879 {
  padding-top: 24px;
  padding-bottom: 24px;
  padding-left: 12px;
  padding-right: 12px;
}

._imgfade_5wij0_2893._emblaContainer_5wij0_2571 {
  transform: none !important; /* override Embla */
  display: flex;
  /* height: 250px; */
}

._notFullScreen_5wij0_2905 {
  top: 0;
}

._imgfade_5wij0_2893._emblaSlide_5wij0_2613 {
  flex: 0 0 auto;
  width: 100%;
  height: 100%;
  position: absolute;
  /* top: 0; */
  left: 0 !important; /* override Embla */
  right: 0 !important; /* override Embla */
  opacity: 0;
  transition: opacity 0.5s;
  counter-increment: embla;
  border-radius: 0.5rem;
}

._imgFadeWithTopCaption_5wij0_2941 {
  top: 16%;
  position: fixed;
}

._imgfade_5wij0_2893._emblaSlideSelected_5wij0_2951 {
  opacity: 1;
  transition: opacity 0.3s;
  z-index: 1;
}

._imgfade_5wij0_2893._emblaSlide_5wij0_2613:before {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

._fullImg_5wij0_2977 {
  height: 84vh;
  max-height: 84vh;
  object-fit: contain;
}

._rotateImg90Deg_5wij0_2989{
transform: rotate(90deg);
transition: transform 1s linear;
}  

._rotate_img_5wij0_2999 {
transition: transform 0.7s linear;
}

._fullScreenContainer_5wij0_477 img {
/* max-height: 100vh; */
}

._slideshowImg_5wij0_233 img {
height: 100%;
}

`;
(function() {
  if (typeof document === "undefined") {
    return;
  }
  if (!document.getElementById(digest)) {
    var el = document.createElement("style");
    el.id = digest;
    el.textContent = css;
    document.head.appendChild(el);
  }
})();
var SlideshowLightbox_module_css_default = { "lightboxjs": "_lightboxjs_5wij0_1", "slideshowBtn": "_slideshowBtn_5wij0_37", "closeIcon": "_closeIcon_5wij0_45", "iconsHeader": "_iconsHeader_5wij0_49", "prev1": "_prev1_5wij0_53", "next1": "_next1_5wij0_55", "icon": "_icon_5wij0_49", "prevIcon": "_prevIcon_5wij0_69", "nextIcon": "_nextIcon_5wij0_71", "show": "_show_5wij0_81", "displayHidden": "_displayHidden_5wij0_89", "thumbnail": "_thumbnail_5wij0_97", "thumbnails": "_thumbnails_5wij0_133", "thumbnailsWithCaption": "_thumbnailsWithCaption_5wij0_149", "thumbnailsOuterContainer": "_thumbnailsOuterContainer_5wij0_157", "navigationDots": "_navigationDots_5wij0_181", "imageSlide": "_imageSlide_5wij0_197", "thumbnailsAndCaption": "_thumbnailsAndCaption_5wij0_221", "hideControlsBar": "_hideControlsBar_5wij0_233", "slideshowImg": "_slideshowImg_5wij0_233", "rotateImgInnerContainer": "_rotateImgInnerContainer_5wij0_241", "slideshowInnerContainer": "_slideshowInnerContainer_5wij0_249", "videoThumbnailsOuterContainer": "_videoThumbnailsOuterContainer_5wij0_269", "imgTitleContainer": "_imgTitleContainer_5wij0_277", "thumbnailsOuterContainerMetadata": "_thumbnailsOuterContainerMetadata_5wij0_337", "htmlVideoOuterContainer": "_htmlVideoOuterContainer_5wij0_361", "caption": "_caption_5wij0_373", "galleryImg": "_galleryImg_5wij0_393", "modalContainer": "_modalContainer_5wij0_403", "slideshowAnimContainer": "_slideshowAnimContainer_5wij0_441", "fullScreenContainer": "_fullScreenContainer_5wij0_477", "imageInnerContainer": "_imageInnerContainer_5wij0_489", "magnifyWrapper": "_magnifyWrapper_5wij0_527", "slideshowInnerVideoContainer": "_slideshowInnerVideoContainer_5wij0_567", "slideshowInnerContainerThumbnails": "_slideshowInnerContainerThumbnails_5wij0_575", "lightboxContainer": "_lightboxContainer_5wij0_599", "slideshowAnimImg": "_slideshowAnimImg_5wij0_671", "controls": "_controls_5wij0_681", "ytVideo": "_ytVideo_5wij0_721", "videoOuterContainer": "_videoOuterContainer_5wij0_733", "customVideoContainer": "_customVideoContainer_5wij0_761", "customEmbedContainer": "_customEmbedContainer_5wij0_761", "videoIconsHeader": "_videoIconsHeader_5wij0_771", "lightbox": "_lightbox_5wij0_1", "imgTitle": "_imgTitle_5wij0_277", "innerContainerWithTopCaption": "_innerContainerWithTopCaption_5wij0_1051", "slideshowImgFullscreen": "_slideshowImgFullscreen_5wij0_1059", "slideshowInnerContainerFullScreen": "_slideshowInnerContainerFullScreen_5wij0_1111", "fullScreenLightboxImg": "_fullScreenLightboxImg_5wij0_1119", "slideshowInnerContainerImgMetadata": "_slideshowInnerContainerImgMetadata_5wij0_1131", "opacityFade": "_opacity-fade_5wij0_1185", "imageSliderThumbnails": "_imageSliderThumbnails_5wij0_1221", "slideshowImgMetadata": "_slideshowImgMetadata_5wij0_1297", "prev1Metadata": "_prev1Metadata_5wij0_1305", "slideshowImgWithCaption": "_slideshowImgWithCaption_5wij0_1347", "hideControlsBarAndCaption": "_hideControlsBarAndCaption_5wij0_1355", "lightboxImg": "_lightboxImg_5wij0_1373", "lightIcon": "_lightIcon_5wij0_1423", "darkIcon": "_darkIcon_5wij0_1449", "lightHeaderIcon": "_lightHeaderIcon_5wij0_1479", "darkHeaderIcon": "_darkHeaderIcon_5wij0_1505", "magnifierImage": "_magnifierImage_5wij0_1529", "active": "_active_5wij0_1537", "inactiveThumbnailBorder": "_inactiveThumbnailBorder_5wij0_1545", "emblaThumbs": "_emblaThumbs_5wij0_1561", "htmlVideo": "_htmlVideo_5wij0_361", "containImg": "_containImg_5wij0_1899", "reactTransformComponent": "_reactTransformComponent_5wij0_1931", "loader": "_loader_5wij0_1953", "rotation": "_rotation_5wij0_1", "dayLoader": "_dayLoader_5wij0_1999", "nightLoader": "_nightLoader_5wij0_2009", "closeButton": "_closeButton_5wij0_2031", "closeButtonRounded": "_closeButtonRounded_5wij0_2031", "slideImageAndCaption": "_slideImageAndCaption_5wij0_2123", "roundedBorder": "_roundedBorder_5wij0_2155", "maxWidthFull": "_maxWidthFull_5wij0_2163", "maxWidthWithoutMagnifier": "_maxWidthWithoutMagnifier_5wij0_2171", "lightboxVideo": "_lightboxVideo_5wij0_2309", "navigationWrapper": "_navigation-wrapper_5wij0_2319", "dots": "_dots_5wij0_2327", "dot": "_dot_5wij0_2327", "arrow": "_arrow_5wij0_2377", "leftArrow": "_leftArrow_5wij0_2407", "rightArrow": "_rightArrow_5wij0_2421", "arrowDisabled": "_arrow--disabled_5wij0_2445", "navDotsMargin": "_navDotsMargin_5wij0_2455", "inactiveThumbnailBorderImgSlider": "_inactiveThumbnailBorderImgSlider_5wij0_2463", "ytVideoImgSlider": "_ytVideoImgSlider_5wij0_2471", "outerYtVideoImgSlider": "_outerYTVideoImgSlider_5wij0_2491", "imgSliderArrow": "_imgSliderArrow_5wij0_2511", "cursorPointer": "_cursorPointer_5wij0_2533", "lightboxjsIcon": "_lightboxjsIcon_5wij0_2541", "embla": "_embla_5wij0_1561", "emblaViewport": "_emblaViewport_5wij0_2561", "emblaContainer": "_emblaContainer_5wij0_2571", "emblaContainerImgMetadata": "_emblaContainerImgMetadata_5wij0_2601", "imgdrag": "_imgdrag_5wij0_2613", "emblaSlide": "_emblaSlide_5wij0_2613", "emblaThumbsViewport": "_emblaThumbsViewport_5wij0_2633", "emblaThumbsContainer": "_emblaThumbsContainer_5wij0_2641", "emblaThumbsSlide": "_emblaThumbsSlide_5wij0_2677", "emblaThumbsSlideImg": "_emblaThumbsSlideImg_5wij0_2691", "mlAuto": "_mlAuto_5wij0_2705", "metadata": "_metadata_5wij0_2713", "emblaSlideGrid": "_emblaSlideGrid_5wij0_2721", "metadataPanel": "_metadataPanel_5wij0_2743", "metadataInnerContainer": "_metadataInnerContainer_5wij0_2755", "imgMetadataCloseBtn": "_imgMetadataCloseBtn_5wij0_2773", "reactTransformWrapper": "_reactTransformWrapper_5wij0_2795", "navigationDot": "_navigationDot_5wij0_181", "navigationDotContainer": "_navigationDotContainer_5wij0_2879", "imgfade": "_imgfade_5wij0_2893", "notFullScreen": "_notFullScreen_5wij0_2905", "imgFadeWithTopCaption": "_imgFadeWithTopCaption_5wij0_2941", "emblaSlideSelected": "_emblaSlideSelected_5wij0_2951", "fullImg": "_fullImg_5wij0_2977", "rotateImg90Deg": "_rotateImg90Deg_5wij0_2989", "rotateImg": "_rotate_img_5wij0_2999" };

// src/components/SlideshowLightbox/utility.js
var import_react = require("react");
var wrapNums = (minNum, maxNum, v) => {
  if (minNum == maxNum) {
    return minNum;
  }
  let rangeSize = maxNum - minNum;
  return ((v - minNum) % rangeSize + rangeSize) % rangeSize + minNum;
};
var shouldAutoplay = (elem) => {
  if (elem.type == "yt" && elem.autoPlay != true && elem.autoPlay != "true") {
    return false;
  } else if (elem.autoPlay == false || elem.autoPlay == "false") {
    return false;
  }
  return true;
};
var getVideoHeight = (elem) => {
  if (elem.videoHeight) {
    return elem.videoHeight;
  }
  return "200";
};
var getVideoWidth = (elem) => {
  if (elem.videoWidth) {
    return elem.videoWidth;
  }
  return "900";
};
var getScale = (num, maxScale) => {
  if (num < 1) {
    return 1;
  } else if (num > maxScale) {
    return maxScale;
  }
  return num;
};

// src/components/SlideshowLightbox/SlideshowLightbox.tsx
var import_react_bootstrap_icons = require("react-bootstrap-icons");
var import_react_portal = require("react-portal");
var import_react_zoom_pan_pinch = require("react-zoom-pan-pinch");
var import_react_key_handler = __toESM(require("@banzai-inc/react-key-handler"));
var import_usehooks_ts = require("usehooks-ts");
var import_embla_carousel_react = __toESM(require("embla-carousel-react"));
var import_react_youtube = __toESM(require("react-youtube"));
var import_resize_observer = __toESM(require("@react-hook/resize-observer"));
var import_full_esm = __toESM(require("exifr/dist/full.esm.mjs"));
var import_js_file_downloader = __toESM(require("js-file-downloader"));
var import_react_div_100vh = require("react-div-100vh");
var import_jsx_runtime = require("react/jsx-runtime");
var import_react3 = require("react");
var thumbnailVariants = {
  visible: { opacity: 1, y: 0 },
  hidden: { opacity: 0, y: 100 }
};
var themes = {
  day: {
    background: "white",
    iconColor: "black",
    thumbnailBorder: "solid transparent 2px",
    textColor: "black",
    metadataTextColor: "black"
  },
  night: {
    background: "#151515",
    iconColor: "#626b77",
    thumbnailBorder: "solid rgb(107, 133, 206)  2px",
    textColor: "silver",
    metadataTextColor: "white"
  },
  lightbox: {
    background: "rgba(12, 12, 12, 0.93)",
    iconColor: "#626b77",
    thumbnailBorder: "solid rgb(107, 133, 206) 2px",
    textColor: "silver",
    metadataTextColor: "white"
  }
};
var inactiveThumbnailBorder = "solid transparent 2px";
var defaultTheme = "night";
var mobileWidth = 768;
var tabletWidth = 1100;
var usePrevious = (value) => {
  const ref = (0, import_react2.useRef)();
  (0, import_react2.useEffect)(() => {
    ref.current = value;
  });
  return ref.current;
};
var SlideshowLightbox = React.forwardRef(
  (props, ref) => {
    (0, import_react2.useImperativeHandle)(
      ref,
      () => ({
        reset() {
          initImages(true, true);
        }
      })
    );
    const [[imgSlideIndex, direction], setImgSlideIndex] = (0, import_react2.useState)([0, 0]);
    const [showModal, setShowModal] = (0, import_react2.useState)(false);
    const [slideAnimDuration, setSlideAnimDuration] = (0, import_react2.useState)(props.slideDuration ? props.slideDuration : 25);
    const [isSlideshowPlaying, setIsSlideshowPlaying] = (0, import_react2.useState)(false);
    const [emblaReinitialized, setEmblaReinitialized] = (0, import_react2.useState)(false);
    const [images, setImages] = (0, import_react2.useState)([]);
    const [previewImageElems, setPreviewImageElems] = (0, import_react2.useState)([]);
    const slideIndex = wrapNums(0, images.length, imgSlideIndex);
    const [reactSwipeOptions, setReactSwipeOptions] = (0, import_react2.useState)({
      loop: true,
      startIndex: 0,
      active: true,
      duration: slideAnimDuration,
      dragThreshold: 10,
      skipSnaps: true
    });
    let initialThumbnailOptions = {
      startIndex: 0,
      containScroll: "keepSnaps",
      dragFree: true
    };
    const [width, setWidth] = (0, import_react2.useState)(0);
    const isMobile = width <= mobileWidth;
    const isTablet = width <= tabletWidth;
    const [thumbnailSwipeOptions, setThumbnailSwipeOptions] = (0, import_react2.useState)(initialThumbnailOptions);
    const [carouselReady, setCarouselReady] = (0, import_react2.useState)(false);
    const [isTabletUserAgent, setIsTabletUserAgent] = (0, import_react2.useState)(false);
    const [zoomedIn, setZoomedIn] = (0, import_react2.useState)(false);
    const [isDisplay, setIsDisplay] = (0, import_react2.useState)(false);
    const [fullImg, setFullImg] = (0, import_react2.useState)(false);
    const [isOpen, setIsOpen] = (0, import_react2.useState)(false);
    const [prevFocusedElem, setPrevFocusedElem] = (0, import_react2.useState)(null);
    const [animationEntered, setAnimationEntered] = (0, import_react2.useState)(false);
    const [lightboxModalWidth, setLightboxModalWidth] = (0, import_react2.useState)(
      props.lightboxWidth ? props.lightboxWidth : "100vw"
    );
    const [lightboxModalHeight, setLightboxModalHeight] = (0, import_react2.useState)(
      props.lightboxHeight ? props.lightboxHeight : "100vh"
    );
    const [magnifyingGlassFeature, _setMagnifyingGlassFeature] = (0, import_react2.useState)(
      props.magnifyingGlass ? props.magnifyingGlass : false
    );
    const [disableZoom, setDisableZoom] = (0, import_react2.useState)(
      props.disableImageZoom ? props.disableImageZoom : false
    );
    const [slideshowInterval, setSlideshowInterval] = (0, import_react2.useState)(
      props.slideshowInterval ? props.slideshowInterval : 1700
    );
    const [rightArrowStyle, setRightArrowStyle] = (0, import_react2.useState)(
      props.rightArrowStyle ? props.rightArrowStyle : {}
    );
    const [leftArrowStyle, setLeftArrowStyle] = (0, import_react2.useState)(
      props.leftArrowStyle ? props.leftArrowStyle : {}
    );
    const [maxScale, setMaxScale] = (0, import_react2.useState)(
      props.maxZoomScale ? getScale(props.maxZoomScale, 24) : 8
    );
    const [isRounded, setIsRounded] = (0, import_react2.useState)(
      props.roundedImages ? props.roundedImages : false
    );
    const [showControls, setShowControls] = (0, import_react2.useState)(
      props.showControls ? props.showControls : true
    );
    const [displayFullScreenIcon, setDisplayFullScreenIcon] = (0, import_react2.useState)(
      props.showFullScreenIcon ? props.showFullScreenIcon : true
    );
    const [displayThumbnailIcon, setDisplayThumbnailIcon] = (0, import_react2.useState)(
      props.showThumbnailIcon ? props.showThumbnailIcon : true
    );
    const [displaySlideshowIcon, setDisplaySlideshowIcon] = (0, import_react2.useState)(
      props.showSlideshowIcon ? props.showSlideshowIcon : true
    );
    const [rotateImgIcon, setRotateImgIcon] = (0, import_react2.useState)(
      props.rotateIcon ? props.rotateIcon : false
    );
    const [displayMagnificationIcons, setDisplayMagnificationIcons] = (0, import_react2.useState)(
      props.showMagnificationIcons ? props.showMagnificationIcons : true
    );
    const [nextArrowElem, setNextArrowElem] = (0, import_react2.useState)(
      props.nextArrow ? props.nextArrow : null
    );
    const [isImageComponent, setImageComponent] = (0, import_react2.useState)(
      props.imageComponent ? props.imageComponent : null
    );
    const [prevArrowElem, setPrevArrowElem] = (0, import_react2.useState)(
      props.prevArrow ? props.prevArrow : null
    );
    const [modalCloseOption, setModalCloseOption] = (0, import_react2.useState)(
      props.modalClose ? props.modalClose : "default"
    );
    const [showDownloadBtn, setShowDownloadBtn] = (0, import_react2.useState)(
      props.downloadImages ? props.downloadImages : false
    );
    const [navigationDots, setNavigationDots] = (0, import_react2.useState)(
      props.showNavigationDots ? props.showNavigationDots : false
    );
    const [metadataLocale, setMetadataLocale] = (0, import_react2.useState)(props.metadataTimeLocale ? props.metadataTimeLocale : "en-US");
    const [isRTL, setIsRTL] = (0, import_react2.useState)(props.rtl ? props.rtl : false);
    const [frameworkID, setFrameworkID] = (0, import_react2.useState)(
      props.framework ? props.framework : ""
    );
    const [lightboxIdentifier, setLightboxIdentifier] = (0, import_react2.useState)(
      props.lightboxIdentifier ? props.lightboxIdentifier : false
    );
    const [imageFullScreen, setImageFullScreen] = (0, import_react2.useState)(
      props.fullScreen ? props.fullScreen : false
    );
    const [licenseKey, setLicenseKey] = (0, import_react2.useState)(
      props.licenseKey ? props.licenseKey : ""
    );
    const [displayLoader, setDisplayLoader] = (0, import_react2.useState)(
      props.showLoader ? props.showLoader : false
    );
    const [customControlComponent, setCustomControlComponent] = (0, import_react2.useState)(
      props.controlComponent ? props.controlComponent : false
    );
    const [startingIndex, setStartingIndex] = (0, import_react2.useState)(
      props.startingSlideIndex ? props.startingSlideIndex : 0
    );
    const [backgroundColor, setBackgroundColor] = (0, import_react2.useState)(
      props.backgroundColor ? props.backgroundColor : themes[defaultTheme].background
    );
    const [iconColor, setIconColor] = (0, import_react2.useState)(
      props.iconColor ? props.iconColor : null
    );
    const [textColor, setTextColor] = (0, import_react2.useState)(
      props.textColor ? props.textColor : themes[defaultTheme].textColor
    );
    const [showControlsBar, setShowControlsBar] = (0, import_react2.useState)(
      props.showControlsBar ? props.showControlsBar : true
    );
    const [imgCaptionPlacement, setImgCaptionPlacement] = (0, import_react2.useState)(
      props.captionPlacement ? props.captionPlacement : "below"
    );
    const [coverMode, setCoverMode] = (0, import_react2.useState)(
      props.useCoverMode ? props.useCoverMode : false
    );
    const [displayImgMetadata, setDisplayImgMetadata] = (0, import_react2.useState)(
      props.displayMetadata ? props.displayMetadata : false
    );
    const [showImgMetadataPanel, setShowImgMetadataPanel] = (0, import_react2.useState)(false);
    const [imgMetadata, setImgMetadata] = (0, import_react2.useState)({});
    const [showThumbnails, setShowThumbnails] = (0, import_react2.useState)(
      props.showThumbnails ? props.showThumbnails : false
    );
    const [animatedThumbnails, setAnimatedThumbnails] = (0, import_react2.useState)(
      props.animateThumbnails ? props.animateThumbnails : true
    );
    const [imgAnimation, setImgAnimation] = (0, import_react2.useState)(
      props.imgAnimation ? props.imgAnimation : "imgDrag"
    );
    const [arrowStyle, setArrowStyle] = (0, import_react2.useState)(
      props.arrowStyle ? props.arrowStyle : "dark"
    );
    const div100vhHeight = (0, import_react_div_100vh.use100vh)();
    const lboxHeight = lightboxModalHeight == "100vh" ? div100vhHeight : lightboxModalHeight;
    const [YTVideoCurrentlyPlaying, setYTVideoCurrentlyPlaying] = (0, import_react2.useState)(false);
    const [isBrowserFullScreen, setIsBrowserFullScreen] = (0, import_react2.useState)(false);
    const [enableMagnifyingGlass, setMagnifyingGlass] = (0, import_react2.useState)(false);
    const [imagesLoaded, setImagesLoaded] = (0, import_react2.useState)(false);
    const imageRef = (0, import_react2.useRef)(null);
    const [zoomIdx, setZoomIdx] = (0, import_react2.useState)(0);
    const [imgContainHeight, setImgContainHeight] = (0, import_react2.useState)(500);
    const [imgContainWidth, setImgContainWidth] = (0, import_react2.useState)(426);
    const [isInit, setIsInit] = (0, import_react2.useState)(false);
    const [currentRotation, setCurrentRotation] = (0, import_react2.useState)(0);
    const { open } = props;
    const previousValues = usePrevious({ open });
    const zoomReferences = (0, import_react2.useRef)([]);
    const videoReferences = (0, import_react2.useRef)({});
    const imageRefs = (0, import_react2.useRef)([]);
    const btnRef = (0, import_react2.useRef)(null);
    const [videoElements, setVideoElements] = (0, import_react2.useState)({});
    const [isLoading, setIsLoading] = (0, import_react2.useState)(true);
    const [noWindow, setNoWindow] = (0, import_react2.useState)(props.noWindow ? props.noWindow : false);
    const [touchStart, setTouchStart] = (0, import_react2.useState)(0);
    const [touchEnd, setTouchEnd] = (0, import_react2.useState)(0);
    const [mouseStartX, setMouseStartX] = (0, import_react2.useState)(0);
    const [mouseStartY, setMouseStartY] = (0, import_react2.useState)(0);
    const minimumSwipeDistance = 50;
    const onTouchStart = (e) => {
      setTouchEnd(null);
      setTouchStart(e.targetTouches[0].clientX);
    };
    const onTouchMove = (e) => setTouchEnd(e.targetTouches[0].clientX);
    const onTouchEnd = () => {
      if (touchStart != null && touchEnd != null && imgAnimation == "fade") {
        const distance = touchStart - touchEnd;
        if (distance != null) {
          const isLeftSwipe = distance > minimumSwipeDistance;
          const isRightSwipe = distance < -minimumSwipeDistance;
          if (isLeftSwipe) {
            nextSlide();
          } else if (isRightSwipe) {
            prevSlide();
          }
        }
      }
    };
    const delta = 6;
    const onMouseDown = (event) => {
      setMouseStartX(event.pageX);
      setMouseStartY(event.pageY);
    };
    const onMouseUp = (event) => {
      if (imgAnimation == "fade" && zoomedIn == false) {
        const differenceX = Math.abs(event.pageX - mouseStartX);
        if (differenceX > delta) {
          const isLeftDragMotion = mouseStartX - event.pageX > delta;
          const isRightDragMotion = mouseStartX - event.pageX < -delta;
          if (isLeftDragMotion) {
            nextSlide();
          } else if (isRightDragMotion) {
            prevSlide();
          }
        }
      }
    };
    const createCustomThumbnailBorder = () => {
      if (props.thumbnailBorder) {
        return `solid ${props.thumbnailBorder} 2px`;
      }
    };
    const [thumbnailBorder, setThumbnailBorder] = (0, import_react2.useState)(
      props.thumbnailBorder ? createCustomThumbnailBorder() : themes[defaultTheme].thumbnailBorder
    );
    const [emblaRef, emblaApi] = (0, import_embla_carousel_react.default)(reactSwipeOptions);
    const [emblaThumbsRef, emblaThumbsApi] = (0, import_embla_carousel_react.default)(thumbnailSwipeOptions);
    const getLoaderThemeClass = () => {
      if (props.theme) {
        if (props.theme == "night" || props.theme == "lightbox") {
          return SlideshowLightbox_module_css_default.nightLoader;
        } else if (props.theme == "day") {
          return SlideshowLightbox_module_css_default.dayLoader;
        }
      }
      return SlideshowLightbox_module_css_default.nightLoader;
    };
    const scrollPrev = (0, import_react2.useCallback)(() => {
      if (emblaApi) {
        emblaApi.scrollPrev();
      }
    }, [emblaApi]);
    const scrollNext = (0, import_react2.useCallback)(() => {
      if (emblaApi) {
        emblaApi.scrollNext();
      }
    }, [emblaApi]);
    const variants = {
      active: {
        opacity: 1
      },
      inactive: {
        opacity: 0
      }
    };
    const isImageCaption = (placement) => {
      if (placement != imgCaptionPlacement) {
        return false;
      }
      if (props.images && props.images.length > 0) {
        if (props.images[slideIndex]?.caption) {
          return true;
        }
      }
      return false;
    };
    const getContainerStyles = () => {
      if (props.showControlsBar == false || props.fullScreen) {
        return { height: lboxHeight };
      } else if (isBrowserFullScreen) {
      } else {
        return {};
      }
    };
    const getInnerContainerStyles = () => {
      if (isImageCaption("above")) {
        return SlideshowLightbox_module_css_default.innerContainerWithTopCaption;
      }
      if (rotateImgIcon) {
        return SlideshowLightbox_module_css_default.rotateImgInnerContainer;
      }
      return SlideshowLightbox_module_css_default.slideshowInnerContainerThumbnails;
    };
    const displayDownloadBtn = () => {
      if (isVideo(slideIndex)) {
        return false;
      } else {
        return showDownloadBtn;
      }
    };
    function handleWindowResize() {
      if (!noWindow) {
        setWidth(window.innerWidth);
      }
    }
    const shouldDisplayMagnifyingGlassIcon = () => {
      if (isVideo(slideIndex)) {
        return false;
      }
      if (isMobile == true) {
        return false;
      }
      if (imageFullScreen == true) {
        return false;
      }
      if (magnifyingGlassFeature == true) {
        return true;
      }
      return false;
    };
    const getImageStyle = () => {
      let styleObject = {};
      styleObject["objectFit"] = "contain";
      if (imageFullScreen) {
        if (props.fullScreenFillMode) {
          styleObject["objectFit"] = props.fullScreenFillMode;
          if (props.fullScreenFillMode == "cover") {
            styleObject["maxHeight"] = "94vh";
            styleObject["maxWidth"] = "70vw";
            styleObject["marginTop"] = "auto";
            styleObject["marginBottom"] = "auto";
          }
        } else {
          styleObject["objectFit"] = "contain";
          styleObject["height"] = lboxHeight;
          styleObject["maxHeight"] = lboxHeight;
        }
      }
      if (!imageFullScreen && !rotateImgIcon) {
        if (isImageCaption(imgCaptionPlacement) && showThumbnails == false) {
        }
        if (isImageCaption(imgCaptionPlacement) && showThumbnails) {
        }
        if (props.thumbnailImgAnim && showThumbnails == false) {
          styleObject["height"] = "87vh";
        } else if (isImageCaption(imgCaptionPlacement) != true) {
        }
        if (props.thumbnailImgAnim && showThumbnails) {
          styleObject["height"] = "67vh";
        }
      }
      if (rotateImgIcon && showThumbnails) {
        styleObject["width"] = "57vw";
        styleObject["marginTop"] = "10vh";
      } else if (rotateImgIcon && showThumbnails == false) {
        styleObject["width"] = "57vw";
        styleObject["marginTop"] = "15vh";
      }
      if (isRounded) {
        styleObject["borderRadius"] = "20px";
      }
      if (modalCloseOption == "clickOutside") {
        styleObject["pointerEvents"] = "auto";
      }
      if (isImageComponent && showThumbnails == false && !isMobile) {
        styleObject["height"] = "85vh";
      }
      return styleObject;
    };
    const shouldDisplaySlideshowIcon = () => {
      if (props.showSlideshowIcon != void 0) {
        return props.showSlideshowIcon;
      }
      if (images) {
        if (images.length == 1) {
          return false;
        }
      } else if (props.images) {
        if (props.images.length == 1) {
          return false;
        }
      }
      return true;
    };
    const navigationClick = (index) => {
      initLoader(index);
      setCurrentSlide(index);
    };
    const checkModalClick = (e) => {
      const modals = document.getElementsByClassName("imageModal");
      let arr_modals = Array.from(modals);
      for (let i = 0; i < arr_modals.length; i++) {
        let elem = arr_modals[i];
        let clickInside = elem.contains(e.target);
        if (clickInside) {
          return;
        }
      }
      closeModal();
    };
    const isZoomEnabled = () => {
      if (disableZoom == true) {
        return false;
      }
    };
    const getRTLIndex = (img_gallery_length, i) => {
      let index;
      if (i == 0) {
        index = img_gallery_length - 1;
      } else if (i == img_gallery_length - 1) {
        index = 0;
      } else {
        index = img_gallery_length - i - 1;
      }
      return index;
    };
    const getMetadataTextColor = () => {
      if (props.theme) {
        if (themes[props.theme]) {
          return themes[props.theme].metadataTextColor;
        }
      } else {
        return themes[defaultTheme].metadataTextColor;
      }
    };
    const fullScreen = () => {
      let lightbox = document.getElementById("slideshowAnim");
      openFullScreen(lightbox);
      initFullScreenChangeEventListeners();
    };
    const fullScreenHandler = () => {
      if (document["webkitIsFullScreen"] || document["mozFullScreen"] || document["msFullscreenElement"]) {
        setIsBrowserFullScreen(true);
        setLightboxModalHeight("100vh");
      } else {
        if (isBrowserFullScreen) {
          closeFullScreen(document);
        }
        removeFullScreenChangeEventListeners();
        setIsBrowserFullScreen(false);
        setLightboxModalHeight(props.lightboxHeight ? props.lightboxHeight : "100vh");
      }
    };
    const exitFullScreen = () => {
      closeFullScreen(document);
      removeFullScreenChangeEventListeners();
    };
    const emblaSlideSelect = (0, import_react2.useCallback)((emblaApi2) => {
    }, []);
    (0, import_react2.useEffect)(
      () => {
        if (emblaApi) emblaApi.on("slidesInView", emblaSlideSelect);
      },
      [emblaApi, emblaSlideSelect]
    );
    const updateImageSlideshow = (newDirection) => {
      if (isRTL) {
        scrollPrev();
      } else {
        scrollNext();
      }
      setImgSlideIndex([imgSlideIndex + newDirection, newDirection]);
      if (isRTL) {
        setZoomIdx(zoomIdx - 1 < 0 ? images.length - 1 : zoomIdx - 1);
      } else {
        setZoomIdx(zoomIdx + 1 >= images.length ? 0 : zoomIdx + 1);
      }
    };
    const displayArrows = () => {
      if (props.showArrows == false) {
        return false;
      }
      if (props.images) {
        if (props.images.length == 1) {
          return false;
        }
      } else if (images.length == 1) {
        return false;
      }
      return true;
    };
    const initLoader = (newIndex) => {
      if (props.showLoader && props.images) {
        if (!isVideo(newIndex) && images[newIndex].loaded != true) {
          setDisplayLoader(true);
        } else if (props.showLoader && props.images && images[newIndex]["loaded"]) {
          setDisplayLoader(false);
        }
      }
    };
    const getImageCaption = () => {
      if (props.images && props.images.length > 0) {
        return props.images[slideIndex].caption;
      }
      return "";
    };
    const getArrowStyle = () => {
      if (arrowStyle == "dark") {
        return SlideshowLightbox_module_css_default.darkIcon;
      } else if (arrowStyle == "light") {
        return SlideshowLightbox_module_css_default.lightIcon;
      }
    };
    const getIconStyle = () => {
      if (arrowStyle == "dark") {
        return SlideshowLightbox_module_css_default.darkHeaderIcon;
      } else if (arrowStyle == "light") {
        return SlideshowLightbox_module_css_default.lightHeaderIcon;
      }
    };
    const setCurrentSlide = (newIndex) => {
      let newDirection;
      if (newIndex > imgSlideIndex) {
        newDirection = 1;
      } else {
        newDirection = -1;
      }
      setZoomIdx(newIndex);
      setImgSlideIndex([newIndex, newDirection]);
      if (emblaApi) {
        emblaApi.scrollTo(newIndex);
      }
    };
    const dispatchOpenEvent = () => {
      if (props.onOpen) {
        props.onOpen(slideIndex, images[slideIndex]);
      }
      if (props.onSelect) {
        props.onSelect(slideIndex, images[slideIndex]);
      }
    };
    const dispatchCloseEvent = () => {
      if (props.onClose) {
        props.onClose(slideIndex);
      }
    };
    const dispatchNextImgEvent = (newIndex) => {
      if (props.onNext) {
        props.onNext(newIndex, images[newIndex]);
      }
    };
    const dispatchPrevImgEvent = (newIndex) => {
      if (props.onPrev) {
        props.onPrev(newIndex, images[newIndex]);
      }
    };
    const closeModal = () => {
      setZoomIdx(0);
      if (isBrowserFullScreen) {
        exitFullScreen();
      }
      if (isSlideshowPlaying) {
        setIsSlideshowPlaying(false);
      }
      setShowModal(false);
      setIsOpen(false);
      setCarouselReady(false);
      setEmblaReinitialized(false);
      setCurrentRotation(0);
      if (prevFocusedElem) prevFocusedElem?.focus();
    };
    const openModal = (num) => {
      if (emblaApi) {
        emblaApi.reInit();
        if (emblaThumbsApi) {
          emblaThumbsApi?.scrollTo(emblaApi.selectedScrollSnap());
        }
      }
      setImgSlideIndex([num, 1]);
      setShowModal(true);
      setIsOpen(true);
    };
    const setItemLoaded = (index) => {
      if (props.images) {
        setImages(
          (images2) => images2.map((img, i) => index === i ? {
            ...img,
            loaded: true
          } : img)
        );
      }
    };
    const getContainerHeight = () => {
      if (props.lightboxHeight && isBrowserFullScreen) {
        return "100vh";
      } else if (props.lightboxHeight && !isBrowserFullScreen) {
        return props.lightboxHeight;
      }
      return "";
    };
    const getContainerWidth = () => {
      if (props.lightboxWidth && !isBrowserFullScreen) {
        return props.lightboxWidth;
      } else if (props.lightboxWidth && isBrowserFullScreen) {
        return "";
      }
      return "";
    };
    const setImagesItemLoaded = (index) => {
      setImages(
        (images2) => images2.map((img, i) => index === i ? {
          ...img,
          loaded: true
        } : img)
      );
    };
    const resetMedia = (slide_index) => {
      resetVideo(slide_index);
      resetImage();
    };
    const initImgMetadataPanel = () => {
      if (isMobile && showImgMetadataPanel) {
        setShowImgMetadataPanel(false);
      }
    };
    const initSlide = (newSlideIndex) => {
      setImgSlideIndex([newSlideIndex, 1]);
      let wrap_slide_index = wrapNums(0, images.length, newSlideIndex);
      setZoomIdx(wrap_slide_index);
      initLoader(wrap_slide_index);
      imageRefs.current[wrap_slide_index].classList.add(`${SlideshowLightbox_module_css_default.rotate_img}`);
      if (displayImgMetadata) {
        initImgMetadataPanel();
        if (!imgMetadata[wrap_slide_index]) {
          setIsLoading(true);
        }
      }
    };
    const nextSlide = () => {
      scrollNext();
      initSlide(imgSlideIndex + 1);
      if (imgAnimation == "fade") {
        dispatchNextImgEvent((imgSlideIndex + 1) % images.length);
      }
    };
    const prevSlide = () => {
      scrollPrev();
      initSlide(imgSlideIndex - 1);
      if (imgAnimation == "fade") {
        dispatchPrevImgEvent((imgSlideIndex - 1) % images.length);
      }
    };
    const setThumbnailStartIndex = (index) => {
      let thumbnailSwipeOptionConfig = thumbnailSwipeOptions;
      thumbnailSwipeOptionConfig.startIndex = index;
      setThumbnailSwipeOptions(thumbnailSwipeOptionConfig);
    };
    const openModalWithSlideNum = (index) => {
      let reactSwipeOptionConfig = reactSwipeOptions;
      reactSwipeOptionConfig.startIndex = index;
      setReactSwipeOptions(reactSwipeOptionConfig);
      setThumbnailStartIndex(index);
      setZoomIdx(index);
      openModal(index);
    };
    const saveImage = () => {
      let img_url;
      if (props.images.length > 0) {
        if (props.images[slideIndex].original) {
          img_url = props.images[slideIndex].original;
        } else {
          img_url = props.images[slideIndex]["src"];
        }
      } else {
        if (images[slideIndex].src) {
          img_url = images[slideIndex].src;
        }
      }
      new import_js_file_downloader.default({
        url: img_url,
        filename: "image.jpg"
      }).then(function() {
      }).catch(function(error) {
      });
    };
    const playSlideshow = () => {
      setMagnifyingGlass(false);
      if (isRTL) {
        updateImageSlideshow(-1);
      } else {
        updateImageSlideshow(1);
      }
      setIsSlideshowPlaying(true);
    };
    const stopSlideshow = () => {
      setIsSlideshowPlaying(false);
    };
    const getEmbedIndex = (slide_index, elems) => {
      if (props.images) {
        let iframe_index = 0;
        for (let i = 0; i < props.images.length; i++) {
          let item = props.images[i];
          if (item.type == "customVideoEmbed" || item.type == "yt") {
            if (i == slide_index) {
              iframe_index++;
              break;
            } else {
              iframe_index++;
            }
          }
        }
        return iframe_index - 1;
      }
    };
    const getEmblaClass = (index) => {
      if (displayImgMetadata) {
        return SlideshowLightbox_module_css_default.emblaSlideGrid;
      }
      if (imgAnimation == "fade") {
        let styles_str = "";
        if (props.fullScreen != true) {
          styles_str += `${SlideshowLightbox_module_css_default.notFullScreen} `;
        }
        styles_str += ` ${SlideshowLightbox_module_css_default.imgfade} ${SlideshowLightbox_module_css_default.emblaSlide} `;
        if (slideIndex == index) {
          styles_str += `${SlideshowLightbox_module_css_default.emblaSlideSelected} `;
        }
        return styles_str;
      } else {
        return SlideshowLightbox_module_css_default.emblaSlide;
      }
    };
    const resetVideo = (slide_index) => {
      if (props.images) {
        let elem = props.images[slide_index];
        if (elem) {
          if (elem.type == "htmlVideo") {
            videoReferences.current[slide_index].pause();
          } else if (elem.type == "yt") {
            if (videoElements[slide_index]) {
              videoElements[slide_index].target.pauseVideo();
            }
          } else if (elem.type == "customVideoEmbed") {
            let lightboxjs_elem = document.getElementById("lightboxContainer");
            let elems = lightboxjs_elem?.querySelectorAll("iframe");
            if (elems) {
              let iframe_elem_index = getEmbedIndex(slide_index, elems);
              if (iframe_elem_index != void 0 && iframe_elem_index >= 0) {
                let iframe = elems[iframe_elem_index];
                let iframe_src = iframe.src;
                iframe.src = iframe_src;
              }
            }
          }
        }
      }
    };
    const getNavigationDot = (index) => {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        "button",
        {
          style: slideIndex === index ? { backgroundColor: "cornflowerblue" } : {},
          className: `${SlideshowLightbox_module_css_default.navigationDot} imageModal`,
          onClick: () => {
            navigationClick(index);
          }
        }
      );
    };
    const getThumbnailsOuterContainerStyle = () => {
      let style = {};
      if (isImageCaption("below")) {
        if (showThumbnails) {
          style["height"] = "21vh";
        } else {
          style["height"] = "12vh";
        }
        style["backgroundColor"] = backgroundColor;
      }
      return style;
    };
    const getImageThumbnail = (img, index, isNextJS, props2) => {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: `${SlideshowLightbox_module_css_default.emblaThumbsSlide}`, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        "img",
        {
          className: `${SlideshowLightbox_module_css_default.thumbnail} imageModal ${props2.thumbnailImgClass ? props2.thumbnailImgClass : ""}  `,
          src: isNextJS == true ? getThumbnailImgSrcNext(img, index) : getThumbnailImgSrc(img, index),
          alt: img.alt,
          onLoad: () => setImagesLoaded(true),
          style: slideIndex === index ? { border: thumbnailBorder } : { border: inactiveThumbnailBorder },
          onClick: (event) => {
            if (props2.onThumbnailClick) {
              props2.onThumbnailClick(index, img);
            }
            navigationClick(index);
          }
        },
        "thumbnail_" + index
      ) }, "thumbnail_slide_" + index);
    };
    const handleError = (event, index) => {
      if (props.onImgError) {
        props.onImgError(event, images[slideIndex], index);
      }
    };
    const rotateImage = () => {
      let img_elem = imageRefs.current[zoomIdx];
      let transform_val = img_elem.style.transform;
      let current_rotation = 0;
      if (transform_val) {
        var reg = /rotate\(([0-9.]+)deg\)/;
        current_rotation = parseFloat(transform_val.match(reg)[1]);
      }
      let newRotation = current_rotation + 90;
      let res = newRotation / 90;
      img_elem.style.transform = `rotate(${newRotation}deg)`;
      setCurrentRotation(newRotation);
      if (props.onRotate) {
        let rotationVal = newRotation;
        if (newRotation > 360) {
          rotationVal = newRotation % 360;
        }
        props.onRotate(rotationVal);
      }
    };
    const resetRotation = () => {
      imageRefs.current[zoomIdx].classList.remove(`${SlideshowLightbox_module_css_default.rotate_img}`);
      imageRefs.current[zoomIdx].style.transform = "";
      setCurrentRotation(0);
    };
    const resetImage = () => {
      if (enableMagnifyingGlass) {
        initMagnifyingGlass();
      } else {
        if (zoomReferences.current[zoomIdx] != null) {
          zoomReferences.current[zoomIdx].resetTransform();
        }
      }
    };
    const getThumbnailImgSrc = (img, index) => {
      if (props.images && props.images.length > 0) {
        if (props.images[index].thumbnailSrc) {
          return props.images[index].thumbnailSrc;
        }
      }
      if (isVideo(index) && img.thumbnail) {
        return img.thumbnail;
      } else {
        return img.src;
      }
    };
    const getImgFadeClass = () => {
      if (imgAnimation == "fade") {
        if (isImageCaption("above")) {
          return ` ${SlideshowLightbox_module_css_default.imgfade} ${SlideshowLightbox_module_css_default.imgFadeWithTopCaption}`;
        } else {
          return ` ${SlideshowLightbox_module_css_default.imgfade}`;
        }
      }
    };
    const getThumbnailImgSrcNext = (img, index) => {
      if (img.thumbnailSrc) {
        return img.thumbnailSrc;
      } else if (isVideo(index)) {
        return img.thumbnail;
      } else {
        let img_src = img.src;
        if (typeof img_src === "object" && !Array.isArray(img_src) && img_src !== null) {
          return img_src.src;
        } else {
          return img_src;
        }
      }
    };
    const isAnimImageComponent = () => {
      if (images) {
        if (images.length == 1) {
          return true;
        }
      }
      return false;
    };
    const initWrapperClassname = () => {
      let classNameStr = "";
      if (props.className) {
        classNameStr += `${props.className} `;
      }
      if (isAnimImageComponent()) {
        if (props.imgWrapperClassName) {
          classNameStr += `${props.imgWrapperClassName} `;
        }
      }
      classNameStr += `${SlideshowLightbox_module_css_default.lightboxjs}`;
      return classNameStr;
    };
    const initStyling = () => {
      if (props.theme) {
        if (themes[props.theme]) {
          setBackgroundColor(themes[props.theme].background);
          setTextColor(themes[props.theme].textColor);
        }
      }
      if (props.fullScreen) {
        if (props.fullScreen == true) {
          setImgAnimation(props.imgAnimation && props.imgAnimation == "imgDrag" ? props.imgAnimation : "fade");
          setIsRounded(false);
        }
      }
    };
    const getMetadataPanel = () => {
      let imgMetadataItem = imgMetadata[slideIndex];
      if (imgMetadataItem) {
        let element = /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: SlideshowLightbox_module_css_default.metadataPanel, children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("b", { children: "Filename" }),
          imgMetadataItem.name ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", { children: imgMetadataItem.name }) : null,
          imgMetadataItem.createDate ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("b", { children: "Captured Time" }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", { children: imgMetadataItem.createDate.toString() })
          ] }) : null,
          imgMetadataItem.width && imgMetadataItem.height ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("b", { children: "Resolution" }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", { children: [
              imgMetadataItem.width,
              "*",
              imgMetadataItem.height
            ] })
          ] }) : null,
          imgMetadataItem.isoData || imgMetadataItem.fNumber || imgMetadataItem.shutterSpeed ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("b", { children: "Image Details" }),
            imgMetadataItem.isoData ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", { children: [
              "ISO ",
              imgMetadataItem.isoData
            ] }) : null,
            imgMetadataItem.fNumber ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", { children: [
              "f",
              imgMetadataItem.fNumber
            ] }) : null,
            imgMetadataItem.shutterSpeed ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", { children: [
              "Shutter speed: ",
              imgMetadataItem.shutterSpeed
            ] }) : null
          ] }) : null
        ] });
        return element;
      }
    };
    const imageSlideElement = (index) => {
      let imageElem;
      if (!props.images) {
        imageElem = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "img",
          {
            className: `imageModal ${fullImg && props.thumbnailImgAnim ? SlideshowLightbox_module_css_default.fullImg : false}  
          ${props.imgElemClassname ? props.imgElemClassname : ""}
        ${SlideshowLightbox_module_css_default.lightboxImg} 
        ${enableMagnifyingGlass ? SlideshowLightbox_module_css_default.maxWidthFull : SlideshowLightbox_module_css_default.maxWidthWithoutMagnifier}  ${SlideshowLightbox_module_css_default.containImg} `,
            style: getImageStyle(),
            ref: (el) => imageRefs.current[index] = el,
            loading: "lazy",
            src: images[index].original ? images[index].original : images[index].src,
            onError: (event) => {
              handleError(event, index);
            },
            onLoad: (img) => {
              if (index == slideIndex) {
                setDisplayLoader(false);
              }
              if (props.images) {
                setItemLoaded(index);
              } else {
                setImagesItemLoaded(index);
              }
            },
            id: "img"
          }
        );
      } else if (props.images && props.render) {
        imageElem = props.render.imgSlide(props.images[index]);
      } else {
        let img_link;
        if (props.images) {
          if (typeof images[index].src === "object" && !Array.isArray(images[index].src) && images[index].src !== null) {
            img_link = images[index].src?.src;
          } else if (props.coverImageInLightbox == true) {
            img_link = images[index].src;
          } else {
            img_link = images[index].src;
          }
        }
        imageElem = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "img",
          {
            className: `imageModal  ${fullImg && props.thumbnailImgAnim ? SlideshowLightbox_module_css_default.fullImg : false}   
           ${props.imgElemClassname ? props.imgElemClassname : ""}
        ${SlideshowLightbox_module_css_default.lightboxImg} 
        ${enableMagnifyingGlass ? SlideshowLightbox_module_css_default.maxWidthFull : SlideshowLightbox_module_css_default.maxWidthWithoutMagnifier} ${SlideshowLightbox_module_css_default.containImg} `,
            ref: (el) => imageRefs.current[index] = el,
            loading: "lazy",
            style: getImageStyle(),
            src: images[index].original ? images[index].original : img_link,
            onError: (event) => {
              handleError(event, index);
            },
            onLoad: (img) => {
              if (index == slideIndex) {
                setDisplayLoader(false);
              }
              if (props.images) {
                setItemLoaded(index);
              } else {
                setImagesItemLoaded(index);
              }
            },
            id: "img"
          }
        );
      }
      return imageElem;
    };
    const getCloseIconBtnStyle = () => {
      let style_object = {};
      if (iconColor) {
        style_object = { color: iconColor };
      }
      if (props.closeIconBtnStyle) {
        let closeIconBtnStyleKeys = Object.keys(props.closeIconBtnStyle);
        for (let i = 0; i < closeIconBtnStyleKeys.length; i++) {
          let keyName = closeIconBtnStyleKeys[i];
          let style_obj = props.closeIconBtnStyle[keyName];
          style_object[keyName] = style_obj;
        }
      }
      return style_object;
    };
    const isPanningDisabled = () => {
      if ((isMobile || isTablet || isTabletUserAgent) && zoomedIn == false) {
        return true;
      }
      if ((isMobile || isTablet || isTabletUserAgent) && zoomedIn) {
        return false;
      }
      return false;
    };
    const getImageFilename = (img_src) => {
      let img_src_split = img_src.split("/");
      let name = img_src_split[img_src_split.length - 1];
      return name;
    };
    const parseCreateDate = (js_date) => {
      if (js_date) {
        let date = js_date.getDate();
        let month = js_date.getMonth() + 1;
        let year = js_date.getFullYear();
        let time = js_date.toLocaleTimeString(metadataLocale);
        return "" + year + "-" + (month <= 9 ? "0" + month : month) + "-" + (date <= 9 ? "0" + date : date) + ` ${time}`;
      }
      return "";
    };
    const getLightboxElem = (index) => {
      if (isCustomEmbed(index)) {
        return customEmbedElement(index);
      } else if (isVideo(index)) {
        return videoSlideElement(index);
      } else if (isPictureElement(index)) {
        let elem_metadata = props.images[index]["picture"];
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("picture", { className: `imageModal 
      ${SlideshowLightbox_module_css_default.lightboxImg} 
      ${enableMagnifyingGlass ? SlideshowLightbox_module_css_default.maxWidthFull : SlideshowLightbox_module_css_default.maxWidthWithoutMagnifier} `, children: [
          Object.keys(elem_metadata).map((format) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "source",
            {
              type: format,
              srcSet: elem_metadata[format].srcSet
            },
            format
          )),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "img",
            {
              src: elem_metadata["fallback"],
              onError: (error) => {
                handleError(error, index);
              }
            }
          )
        ] });
      } else {
        if (images && props.render || frameworkID == "next") {
          return imageSlideElement(index);
        } else {
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "img",
            {
              className: `imageModal  ${fullImg && props.thumbnailImgAnim ? SlideshowLightbox_module_css_default.fullImg : false}   
           ${props.imgElemClassname ? props.imgElemClassname : ""}
          ${SlideshowLightbox_module_css_default.lightboxImg} ${SlideshowLightbox_module_css_default.rotate_img}
          ${enableMagnifyingGlass ? SlideshowLightbox_module_css_default.maxWidthFull : SlideshowLightbox_module_css_default.maxWidthWithoutMagnifier} ${SlideshowLightbox_module_css_default.containImg} `,
              ref: (el) => imageRefs.current[index] = el,
              loading: "lazy",
              style: getImageStyle(),
              src: images && images[index].original ? images[index].original : images[index].src,
              onLoad: (img) => {
                if (displayImgMetadata) {
                  if (img) {
                    let img_target = img.target;
                    let individual_image_metadata = {};
                    let name = getImageFilename(img_target.src);
                    individual_image_metadata["name"] = name;
                    import_full_esm.default.parse(img_target, true).then((exif) => {
                      if (exif) {
                        let keys = ["isoData", "createDate", "height", "width", "shutterSpeed", "fNumber"];
                        for (let i = 0; i < keys.length; i++) {
                          let keyName = keys[i];
                          switch (keyName) {
                            case "isoData":
                              if (exif.ISO) {
                                individual_image_metadata["isoData"] = exif.ISO;
                              }
                              break;
                            case "createDate":
                              if (exif.CreateDate) {
                                individual_image_metadata["createDate"] = parseCreateDate(exif.CreateDate);
                              }
                              break;
                            case "height":
                              if (exif.ExifImageHeight) {
                                individual_image_metadata["height"] = exif.ExifImageHeight;
                              }
                              break;
                            case "width":
                              if (exif.ExifImageWidth) {
                                individual_image_metadata["width"] = exif.ExifImageWidth;
                              }
                              break;
                            case "fNumber":
                              if (exif.fNumber) {
                                individual_image_metadata["fNumber"] = exif.fNumber;
                              }
                              break;
                            case "shutterSpeed":
                              if (exif.ShutterSpeedValue) {
                                individual_image_metadata["shutterSpeed"] = exif.ShutterSpeedValue;
                              }
                              break;
                          }
                        }
                        let imgMetadataItems = imgMetadata;
                        imgMetadataItems[index] = individual_image_metadata;
                        setImgMetadata(imgMetadataItems);
                        if (index == slideIndex) {
                          setIsLoading(false);
                        }
                      }
                    });
                  }
                }
                if (index == slideIndex) {
                  setDisplayLoader(false);
                }
                if (props.images) {
                  setItemLoaded(index);
                } else {
                  setImagesItemLoaded(index);
                }
              },
              id: "img"
            },
            index
          );
        }
      }
    };
    const isCustomEmbed = (index) => {
      if (props.images) {
        let elem = props.images[index];
        if (elem) {
          if (elem.type == "customEmbed") {
            return true;
          }
        }
      }
      return false;
    };
    const isVideo = (index) => {
      if (props.images) {
        let elem = props.images[index];
        if (elem) {
          if (elem.type == "yt" || elem.type == "htmlVideo" || elem.type == "customVideoEmbed") {
            return true;
          }
        }
      }
      return false;
    };
    const shouldDisplayMetadataPanel = () => {
      if (isMobile) {
        if (showImgMetadataPanel) {
          return true;
        } else {
          return false;
        }
      } else {
        return displayImgMetadata;
      }
    };
    const isPictureElement = (index) => {
      if (props.images) {
        let elem = props.images[index];
        if (elem) {
          if (elem.picture) {
            return true;
          }
        }
      }
      return false;
    };
    (0, import_react2.useEffect)(() => {
      if (!emblaApi) return;
      if (imgAnimation == "fade") {
        emblaApi.internalEngine().translate.toggleActive(false);
      }
    }, [
      carouselReady,
      emblaApi
    ]);
    const isHTMLVideo = (index) => {
      if (props.images) {
        if (props.images && props.images[index].type == "htmlVideo") {
          return true;
        }
      }
      return false;
    };
    const videoSlideElement = (index) => {
      let elem = props.images[index];
      let videoElem;
      if (elem.type == "yt") {
        videoElem = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: `${SlideshowLightbox_module_css_default.videoOuterContainer} imageModal`, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_react_youtube.default,
          {
            videoId: elem.videoID,
            ref: (el) => videoReferences.current[index] = el,
            iframeClassName: `${SlideshowLightbox_module_css_default.ytVideo}`,
            title: "YouTube video player",
            opts: {
              height: getVideoHeight(elem),
              width: getVideoWidth(elem),
              playerVars: {
                // https://developers.google.com/youtube/player_parameters
                autoplay: shouldAutoplay(elem) ? 1 : 0
              }
            },
            onReady: (event) => {
              let videoElems = videoElements;
              videoElems[index] = event;
              setVideoElements(videoElems);
              if (index == slideIndex) {
                setDisplayLoader(false);
              }
              setItemLoaded(index);
            },
            onPlay: (event) => {
              setYTVideoCurrentlyPlaying(true);
            },
            onPause: (event) => {
              setYTVideoCurrentlyPlaying(false);
            },
            onEnd: (event) => {
              setYTVideoCurrentlyPlaying(false);
            },
            onError: (event) => {
              handleError(event, index);
            },
            onStateChange: (event) => {
            },
            onPlaybackRateChange: (event) => {
            },
            onPlaybackQualityChange: (event) => {
            }
          }
        ) });
      } else if (elem.type == "htmlVideo") {
        videoElem = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "div",
          {
            className: `${SlideshowLightbox_module_css_default.htmlVideo} ${SlideshowLightbox_module_css_default.htmlVideoOuterContainer} imageModal`,
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "video",
              {
                className: `${SlideshowLightbox_module_css_default.cursorPointer} ${SlideshowLightbox_module_css_default.lightboxVideo}`,
                width: getVideoWidth(elem),
                ref: (el) => videoReferences.current[index] = el,
                onPlay: () => {
                },
                onError: (event) => {
                  handleError(event, index);
                },
                height: getVideoHeight(elem),
                autoPlay: index == imgSlideIndex ? shouldAutoplay(elem) : false,
                controls: true,
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  "source",
                  {
                    src: elem.videoSrc,
                    type: "video/mp4",
                    onLoad: () => {
                      setItemLoaded(index);
                    }
                  }
                )
              }
            )
          }
        );
      } else if (elem.type == "customVideoEmbed") {
        videoElem = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: `${SlideshowLightbox_module_css_default.customVideoContainer} imageModal`, children: elem.embed });
      }
      return videoElem;
    };
    const customEmbedElement = (index) => {
      let elem = props.images[index];
      let customElem;
      if (elem.type == "customEmbed") {
        customElem = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: `${SlideshowLightbox_module_css_default.customEmbedContainer} imageModal`, children: elem.embed });
      }
      return customElem;
    };
    const initZoom = (ref2) => {
      if (imgAnimation == "fade") {
        if (ref2.state.scale <= 1) {
          setZoomedIn(false);
        } else {
          setZoomedIn(true);
        }
      } else {
        if (ref2.state.scale <= 1.65) {
          setZoomedIn(false);
        } else {
          setZoomedIn(true);
        }
      }
    };
    const regularImgPaneNodes = Array.apply(null, Array(images.length)).map(
      (_, index) => {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "div",
          {
            className: `${props.fullScreen ? SlideshowLightbox_module_css_default.fullScreenContainer : null}`,
            style: { height: lboxHeight },
            children: enableMagnifyingGlass == true ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {}) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "div",
              {
                className: getEmblaClass(index),
                onTouchStart,
                onTouchMove,
                onTouchEnd,
                onMouseDown,
                onMouseUp,
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_react_zoom_pan_pinch.TransformWrapper,
                  {
                    ref: (el) => zoomReferences.current[index] = el,
                    onWheel: (ref2, wheelEvent) => {
                      initZoom(ref2);
                    },
                    disabled: disableZoom,
                    panning: {
                      disabled: isPanningDisabled()
                    },
                    onZoom: (ref2, event) => {
                      initZoom(ref2);
                    },
                    onZoomStop: (ref2, event) => {
                      initZoom(ref2);
                    },
                    onTransformed: (ref2, event) => {
                      initZoom(ref2);
                    },
                    onPinchingStop: (ref2, event) => {
                      initZoom(ref2);
                    },
                    centerZoomedOut: true,
                    initialScale: 1,
                    maxScale,
                    alignmentAnimation: { sizeX: 0, sizeY: 0 },
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_react_zoom_pan_pinch.TransformComponent,
                      {
                        wrapperClass: SlideshowLightbox_module_css_default.reactTransformWrapper,
                        contentClass: SlideshowLightbox_module_css_default.reactTransformComponent,
                        wrapperStyle: {
                          maxWidth: "100vw",
                          height: "100vh",
                          margin: "auto"
                        },
                        contentStyle: {
                          maxWidth: "100vw",
                          height: "100vh",
                          margin: "auto",
                          display: "grid"
                        },
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          "div",
                          {
                            className: `${SlideshowLightbox_module_css_default.slideshowImg} ${props.lightboxImgClass ? props.lightboxImgClass : ""}
                      ${displayImgMetadata ? SlideshowLightbox_module_css_default.slideshowImgMetadata : ""} 
                      ${isImageCaption(imgCaptionPlacement) ? SlideshowLightbox_module_css_default.slideshowImgWithCaption : ""}
                      `,
                            style: {
                              width: getContainerWidth(),
                              height: getContainerHeight()
                            },
                            children: getLightboxElem(index)
                          }
                        )
                      },
                      index
                    )
                  },
                  index
                )
              }
            )
          },
          index
        );
      }
    );
    const initMagnifyingGlass = () => {
      if (!enableMagnifyingGlass) {
        initImageDimensions();
      } else {
        setImgAnimation("imgDrag");
      }
      setMagnifyingGlass(!enableMagnifyingGlass);
    };
    const getMetadataPanelStyle = () => {
      let style_object = {};
      if (isMobile && showImgMetadataPanel) {
        style_object = { height: "100vh" };
      }
      style_object["color"] = getMetadataTextColor();
      return style_object;
    };
    const initImageDimensions = () => {
      let img;
      if (imgSlideIndex == 0 || imgSlideIndex % images.length == 0) {
        img = document.getElementById("img");
      } else {
        img = imageRef.current;
      }
      var ratio = img.naturalWidth / img.naturalHeight;
      var width2 = img.height * ratio;
      var height = img.height;
      if (width2 > img.width) {
        width2 = img.width;
        height = img.width / ratio;
      }
      setImgContainHeight(height);
      setImgContainWidth(width2);
    };
    const initFullScreenChangeEventListeners = () => {
      document.addEventListener("fullscreenchange", fullScreenHandler);
      document.addEventListener("webkitfullscreenchange", fullScreenHandler);
      document.addEventListener("MSFullscreenChange", fullScreenHandler);
      document.addEventListener("mozfullscreenchange", fullScreenHandler);
    };
    const removeFullScreenChangeEventListeners = () => {
      document.removeEventListener("fullscreenchange", fullScreenHandler);
      document.removeEventListener(
        "webkitfullscreenchange",
        fullScreenHandler
      );
      document.removeEventListener("MSFullscreenChange", fullScreenHandler);
      document.removeEventListener("mozfullscreenchange", fullScreenHandler);
    };
    const initEventListeners = () => {
      if (isBrowser() && !noWindow) {
        window.addEventListener("resize", handleWindowResize);
      }
    };
    const removeEventListeners = () => {
      removeOnSelectListener();
      if (isBrowser() && !noWindow) {
        window.removeEventListener("resize", handleWindowResize);
      }
    };
    const setReducedMotion = (mediaQuery) => {
      if (mediaQuery.matches) {
        setImgAnimation("fade");
      }
    };
    const checkAndInitReducedMotion = () => {
      let reducedMotionMediaQuery = "";
      if (isBrowser() && !noWindow) {
        reducedMotionMediaQuery = window.matchMedia(
          "(prefers-reduced-motion: reduce)"
        );
        if (!reducedMotionMediaQuery || reducedMotionMediaQuery.matches) {
          setImgAnimation("fade");
        }
        if (reducedMotionMediaQuery?.addEventListener) {
          reducedMotionMediaQuery.addEventListener("change", setReducedMotion(reducedMotionMediaQuery));
        } else {
          reducedMotionMediaQuery.addListener(setReducedMotion(reducedMotionMediaQuery));
        }
      }
      return reducedMotionMediaQuery;
    };
    const initPropsForControlIcons = () => {
      if (props.showFullScreenIcon != void 0) {
        setDisplayFullScreenIcon(props.showFullScreenIcon);
      }
      if (props.showThumbnailIcon != void 0) {
        setDisplayThumbnailIcon(props.showThumbnailIcon);
      }
      if (props.showSlideshowIcon != void 0) {
        setDisplaySlideshowIcon(props.showSlideshowIcon);
      }
      if (props.showMagnificationIcons != void 0) {
        setDisplayMagnificationIcons(props.showMagnificationIcons);
      }
    };
    const initProps = () => {
      if (props.showControls != void 0) {
        setShowControls(props.showControls);
        if (props.showControls == false) {
          setDisplayMagnificationIcons(false);
        }
      }
      if (props.disableAnim == true) {
        import_framer_motion.MotionGlobalConfig.skipAnimations = true;
      }
      initPropsForControlIcons();
      if (props.disableImageZoom) {
        setDisableZoom(props.disableImageZoom);
      }
      if (isBrowser() && !noWindow) {
        setWidth(window.innerWidth);
      }
    };
    (0, import_usehooks_ts.useInterval)(
      () => {
        if (isRTL) {
          updateImageSlideshow(-1);
        } else {
          updateImageSlideshow(1);
        }
      },
      // Delay in milliseconds or null to stop it
      isSlideshowPlaying ? slideshowInterval : null
    );
    const openFullScreen = (lightbox_elem) => {
      if (lightbox_elem.requestFullscreen) {
        lightbox_elem.requestFullscreen();
      } else if (lightbox_elem.webkitRequestFullscreen) {
        lightbox_elem.webkitRequestFullscreen();
      } else if (lightbox_elem.msRequestFullscreen) {
        lightbox_elem.msRequestFullscreen();
      }
    };
    const closeFullScreen = (document2) => {
      if (document2.exitFullscreen) {
        document2.exitFullscreen();
      } else if (document2.webkitExitFullscreen) {
        document2.webkitExitFullscreen();
      } else if (document2.msExitFullscreen) {
        document2.msExitFullscreen();
      }
    };
    const isBrowser = () => {
      if (!noWindow) {
        return typeof window !== "undefined";
      }
      return false;
    };
    const initRTLImages = () => {
      let imagesMetadataCopy = props.images;
      imagesMetadataCopy.reverse();
      setImages(imagesMetadataCopy);
      if (images.length > 0) {
        let imagesRTLCopy = images;
        imagesRTLCopy.reverse();
        setImages(imagesRTLCopy);
      }
    };
    const initAndOpenLightbox = (i, img_gallery, isMounted) => {
      let index;
      if (isRTL) {
        index = getRTLIndex(img_gallery.length, i);
      } else {
        index = i;
      }
      let reactSwipeOptionConfig = reactSwipeOptions;
      reactSwipeOptionConfig.startIndex = index;
      if (isMounted) setReactSwipeOptions(reactSwipeOptionConfig);
      setZoomIdx(index);
      openModal(index);
    };
    const initImages = (isMounted, updateImages) => {
      if (coverMode && props.images) {
        if (props.coverImageInLightbox == false) {
          let filterImages = props.images.filter((img) => img.cover != true);
          setImages(filterImages);
        } else {
          setImages(props.images);
        }
      }
      if (updateImages || !isInit) {
        if (lightboxIdentifier && props.children) {
          if (props.queryElems) {
            let img_gallery = [];
            for (let k = 0; k < props.queryElems.length; k++) {
              let elemSelector = props.queryElems[k];
              let queryElems = document.querySelectorAll(
                `${elemSelector}`
              );
              queryElems.forEach((element) => {
                img_gallery.push(element);
              });
            }
            let img_elements = [];
            if (img_gallery.length > 0) {
              for (let i = 0; i <= img_gallery.length - 1; i++) {
                let img = img_gallery[i];
                img.addEventListener(
                  "click",
                  () => {
                    initAndOpenLightbox(i, img_gallery, isMounted);
                  },
                  false
                );
                img.classList.add("cursor-pointer");
                if (img.src) {
                  img_elements.push({
                    src: img.src,
                    alt: img.alt,
                    loaded: false
                  });
                } else if (img.href) {
                  img_elements.push({
                    src: img.href,
                    alt: img.alt,
                    loaded: false
                  });
                }
              }
              if (isMounted && !coverMode) {
                if (props.framework != "next") {
                  setImages(img_elements);
                } else if (props.framework == "next") {
                  setImages(props.images);
                }
              }
            }
          } else {
            let img_gallery = document.querySelectorAll(
              `[data-lightboxjs=${lightboxIdentifier}]`
            );
            let originalImageAttr = false;
            let img_elements = [];
            if (img_gallery.length > 0) {
              for (let i = 0; i <= img_gallery.length - 1; i++) {
                let img = img_gallery[i];
                let attr_val = img.getAttribute("data-lightboxjs");
                if (attr_val == lightboxIdentifier) {
                  img.addEventListener(
                    "click",
                    () => {
                      initAndOpenLightbox(i, img_gallery, isMounted);
                    },
                    false
                  );
                  img.classList.add("cursor-pointer");
                  let original_img_src = img.getAttribute("data-lightboxjs-original");
                  if (original_img_src) {
                    img_elements.push({
                      src: original_img_src,
                      alt: img.alt,
                      loaded: false
                    });
                    originalImageAttr = true;
                  } else if (img.src) {
                    img_elements.push({
                      src: img.src,
                      alt: img.alt,
                      loaded: false
                    });
                  } else if (img.tagName == "DIV") {
                    let corresponding_img_item = props.images[i];
                    let img_src = corresponding_img_item.src;
                    let img_alt = corresponding_img_item.alt;
                    img_elements.push({
                      src: img_src,
                      alt: img_alt,
                      loaded: false
                    });
                  }
                }
              }
              if (isMounted && !coverMode) {
                if (originalImageAttr) {
                  setImages(img_elements);
                } else if (props.showAllImages != true && props.framework != "next") {
                  setImages(img_elements);
                } else if (props.framework == "next" && !originalImageAttr) {
                  setImages(props.images);
                } else {
                  setImages(props.images);
                }
              }
            } else {
              if (props.images) {
                setImages(props.images);
              }
            }
          }
        } else if (lightboxIdentifier && props.images && !props.children) {
          setImages(props.images);
        } else if (!lightboxIdentifier && props.images && !props.children) {
          setImages(props.images);
        } else if (!props.render) {
          let imgArray = [];
          if (!Array.isArray(props.children)) {
            imgArray.push(props.children);
          } else {
            imgArray = props.children;
          }
          let imgs = [];
          for (let k = 0; k < imgArray.length; k++) {
            let img_elem = imgArray[k];
            let img_obj = {
              src: img_elem.props.src,
              alt: img_elem.props.alt,
              loaded: false
            };
            imgs.push(img_obj);
          }
          if (isRTL) {
            imgs.reverse();
          }
          if (isMounted) setImages(imgs);
          setPreviewImageElems(imgArray);
        } else {
          if (isMounted) {
            setImages(props.images);
          }
        }
        if (isMounted) setIsInit(true);
      }
    };
    const useForceUpdate = () => {
      let [value, setValue] = (0, import_react2.useState)(true);
      return () => setValue(!value);
    };
    const forceUpdate = useForceUpdate();
    const dispatchSlideSelectEvents = (newIndex, prevIndex) => {
      if (props.onSelect) {
        props.onSelect(newIndex, images[newIndex]);
        forceUpdate();
      }
      if (newIndex == 0 && prevIndex == images.length - 1) {
        dispatchNextImgEvent(newIndex);
      } else if (newIndex == images.length - 1 && prevIndex == 0) {
        dispatchPrevImgEvent(newIndex);
      } else if (newIndex > prevIndex) {
        dispatchNextImgEvent(newIndex);
      } else if (newIndex < prevIndex) {
        dispatchPrevImgEvent(newIndex);
      }
    };
    const onSelect = (0, import_react2.useCallback)(() => {
      if (!emblaApi) return;
      let newSlideIndex = emblaApi.selectedScrollSnap();
      let prevSlideIndex = emblaApi.previousScrollSnap();
      if (newSlideIndex != prevSlideIndex) {
        initSlide(newSlideIndex);
        resetMedia(prevSlideIndex);
        dispatchSlideSelectEvents(newSlideIndex, prevSlideIndex);
      }
      if (emblaThumbsApi) {
        emblaThumbsApi.scrollTo(emblaApi.selectedScrollSnap());
      }
    }, [emblaApi, emblaThumbsApi]);
    const onReinit = (0, import_react2.useCallback)(() => {
      if (!emblaApi) return;
      setEmblaReinitialized(true);
    }, [emblaApi, emblaReinitialized]);
    const handleResize = (entry) => {
      emblaApi?.reInit();
    };
    const rootNode = emblaApi?.rootNode() || null;
    if (isBrowser() && !noWindow) {
      (0, import_resize_observer.default)(rootNode, handleResize);
    }
    const removeOnSelectListener = (0, import_react2.useCallback)(() => {
      if (emblaApi) emblaApi.off("select", onSelect);
    }, [emblaApi, onSelect]);
    (0, import_react2.useEffect)(() => {
      if (emblaApi) {
        if (zoomedIn) {
          emblaApi.reInit({ watchDrag: false });
        } else {
          emblaApi.reInit({ watchDrag: true });
        }
      }
    }, [zoomedIn]);
    (0, import_react2.useEffect)(() => {
      if (displayImgMetadata) {
        if (width != 0 && isMobile) {
          setShowImgMetadataPanel(false);
        } else {
          setShowImgMetadataPanel(true);
        }
      }
    }, [width]);
    (0, import_react2.useEffect)(() => {
      if (!emblaApi) return;
      if (showModal) emblaApi.reInit();
    }, [showModal, emblaApi]);
    (0, import_react2.useEffect)(() => {
      if (emblaApi) emblaApi.on("select", onSelect);
      if (emblaApi) {
      }
    }, [emblaApi, onSelect]);
    (0, import_react2.useEffect)(() => {
      if (emblaApi) emblaApi.on("reInit", onReinit);
    }, [emblaApi, onReinit]);
    (0, import_react2.useEffect)(() => {
      initStyling();
      if (props.iconColor) {
        setIconColor(props.iconColor);
      }
      if (props.backgroundColor) {
        setBackgroundColor(props.backgroundColor);
      }
    }, [props.theme, props.iconColor, props.backgroundColor]);
    (0, import_react2.useEffect)(() => {
      initImages(true, true);
    }, [props.images, props.displayedImages]);
    const prevValue = usePrevious(open);
    const prevImages = usePrevious(images);
    const areObjectsEqual = (object1, object2) => typeof object1 === "object" && object1 != null && typeof object2 === "object" && object2 != null && Object.keys(object1).length > 0 ? Object.keys(object1).length === Object.keys(object2).length && Object.keys(object1).every((p) => areObjectsEqual(object1[p], object2[p])) : object1 === object2;
    const imagesEqualToPrevious = (images2) => {
      if (images2 && prevImages) {
        if ((images2 && images2?.length) != (prevImages && prevImages?.length)) {
          return false;
        }
        let imgArray;
        if (images2.length > prevImages) {
          imgArray = images2;
        } else {
          imgArray = prevImages;
        }
        for (let i = 0; i < imgArray.length; i++) {
          let images_copy = images2.slice(0);
          let prevImages_copy = prevImages.slice(0);
          let image = images_copy[i];
          let prevImage = prevImages_copy[i];
          if (image["loaded"]) {
            delete image["loaded"];
          }
          if (prevImage["loaded"]) {
            delete prevImage["loaded"];
          }
          if (!areObjectsEqual(image, prevImage)) {
            return false;
          }
        }
      }
      return true;
    };
    (0, import_react2.useEffect)(() => {
      let starting_index = 0;
      if (props.startingSlideIndex) {
        starting_index = wrapNums(0, images.length, props.startingSlideIndex);
        setStartingIndex(starting_index);
      }
      if (props.open == true && imagesEqualToPrevious(images) == false && props.startingSlideIndex) {
        if (props.images) {
          setImages(props.images);
        }
        openModalWithSlideNum(starting_index);
      } else if (props.open && prevValue != true) {
        if (props.images) {
          setImages(props.images);
        }
        setIsDisplay(true);
        openModalWithSlideNum(starting_index);
      } else if (props.open == false) {
        setIsDisplay(false);
        closeModal();
      }
    }, [props.open, props.startingSlideIndex, images]);
    (0, import_react2.useEffect)(() => {
      if (isOpen == true) {
        dispatchOpenEvent();
      } else {
        dispatchCloseEvent();
      }
    }, [isOpen]);
    (0, import_react2.useEffect)(() => {
      if (props.render) {
        if (!props.images) {
          console.error(
            "Array of images must be passed to `SlideshowLightbox` (with the `images` prop) if using custom render method. "
          );
        }
      }
      let isMounted = true;
      if (isMounted) initProps();
      if (window) {
        const userAgent = window.navigator.userAgent.toLowerCase();
        let is_tablet_useragent = /(ipad|iphone|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(userAgent);
        let is_ipad_useragent = /Macintosh/i.test(navigator.userAgent) && navigator.maxTouchPoints && navigator.maxTouchPoints > 1;
        setIsTabletUserAgent(is_tablet_useragent || is_ipad_useragent);
      }
      if (coverMode && props.images) {
        if (props.coverImageInLightbox == false) {
          let filterImages = props.images.filter((img) => img.cover != true);
          setImages(filterImages);
        } else {
          setImages(props.images);
        }
      }
      if (isMounted) {
        initEventListeners();
      }
      let reducedMotionMediaQuery = checkAndInitReducedMotion();
      if (displayImgMetadata) {
        setImgAnimation("fade");
      }
      if (!isInit) {
        initImages(isMounted, false);
        if (props.images && isRTL == true) {
          initRTLImages();
        }
      }
      if (isMounted) initStyling();
      return () => {
        isMounted = false;
        removeEventListeners();
        if (reducedMotionMediaQuery) {
          reducedMotionMediaQuery.removeEventListener(
            "change",
            reducedMotionMediaQuery
          );
        }
      };
    }, []);
    const renderPreviewImages = () => {
      let image_elems;
      if (props.images && props.children && lightboxIdentifier == false) {
        image_elems = props.children;
      } else if (props.images && lightboxIdentifier == false) {
        image_elems = props.images.map((elem, index) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "img",
          {
            className: `${props.imgClassName ? props.imgClassName : ""} ${SlideshowLightbox_module_css_default.cursorPointer}`,
            src: !isVideo(index) ? elem.src : elem.thumbnail,
            onClick: () => {
              let img_index;
              if (isRTL) {
                img_index = getRTLIndex(props.images.length, index);
              } else {
                img_index = index;
              }
              openModalWithSlideNum(img_index);
            }
          },
          index
        ));
      } else if (lightboxIdentifier != false && props.children && coverMode == false) {
        {
        }
        image_elems = props.children;
      } else if (!(lightboxIdentifier == false && props.images || coverMode == true)) {
        image_elems = previewImageElems.filter((elem) => elem.type == "img").map((elem, index) => /* @__PURE__ */ (0, import_react3.createElement)(
          "img",
          {
            ...elem.props,
            className: `${elem.props.className ? elem.props.className : ""} ${SlideshowLightbox_module_css_default.cursorPointer}`,
            onClick: () => {
              let img_index;
              if (isRTL) {
                img_index = getRTLIndex(previewImageElems.length, index);
              } else {
                img_index = index;
              }
              openModalWithSlideNum(img_index);
            },
            key: index
          }
        ));
      } else if (coverMode) {
        image_elems = props.children;
      }
      return image_elems;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: `${initWrapperClassname()}`, children: [
      renderPreviewImages(),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.AnimatePresence, { initial: false, mode: "wait", children: showModal !== false && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_portal.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { style: { height: lboxHeight }, children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          import_framer_motion.motion.div,
          {
            className: `${SlideshowLightbox_module_css_default.modalContainer}`,
            style: { height: lboxHeight },
            initial: "inactive",
            variants,
            animate: showModal ? "active" : "inactive",
            exit: "inactive",
            transition: { duration: "0.3" },
            onAnimationComplete: () => {
              let animEntered = !animationEntered;
              setAnimationEntered(animEntered);
              if (animEntered == true) {
                let prevFocusedElement = document.activeElement;
                setPrevFocusedElem(prevFocusedElement);
                document.getElementById("lightboxContainer")?.focus();
              } else {
                prevFocusedElem?.focus();
              }
              if (emblaApi) emblaApi.reInit();
            },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_framer_motion.motion.div,
                {
                  className: `${SlideshowLightbox_module_css_default.slideshowAnimContainer} `,
                  id: "slideshowAnim",
                  style: {
                    backgroundColor,
                    width: lightboxModalWidth,
                    height: lboxHeight
                  },
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                    "div",
                    {
                      className: `${SlideshowLightbox_module_css_default.lightboxContainer} `,
                      id: "lightboxContainer",
                      tabIndex: -1,
                      role: "dialog",
                      onClick: (e) => {
                        if (modalCloseOption == "clickOutside") {
                          checkModalClick(e);
                        }
                      },
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                          "section",
                          {
                            className: `${SlideshowLightbox_module_css_default.iconsHeader} ${iconColor ? "" : getIconStyle()} imageModal`,
                            style: { color: iconColor },
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_react_key_handler.default,
                                {
                                  keyValue: "ArrowLeft",
                                  code: "37",
                                  onKeyHandle: () => {
                                    prevSlide();
                                  }
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_react_key_handler.default,
                                {
                                  keyValue: "ArrowRight",
                                  code: "39",
                                  onKeyHandle: () => {
                                    nextSlide();
                                  }
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_react_key_handler.default,
                                {
                                  keyValue: "Escape",
                                  code: "27",
                                  onKeyHandle: (event) => {
                                    event.preventDefault();
                                    event.stopPropagation();
                                    if (!isBrowserFullScreen) {
                                      closeModal();
                                    }
                                  }
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_react_key_handler.default,
                                {
                                  keyValue: "Left",
                                  code: "37",
                                  onKeyHandle: () => {
                                    prevSlide();
                                  }
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_react_key_handler.default,
                                {
                                  keyValue: "Right",
                                  code: "39",
                                  onKeyHandle: () => {
                                    nextSlide();
                                  }
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_react_key_handler.default,
                                {
                                  keyValue: "Esc",
                                  code: "27",
                                  onKeyHandle: (event) => {
                                    event.preventDefault();
                                    event.stopPropagation();
                                    if (!isBrowserFullScreen) {
                                      closeModal();
                                    }
                                  }
                                }
                              ),
                              showControls == true && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: `${SlideshowLightbox_module_css_default.controls}`, children: [
                                disableZoom || displayMagnificationIcons == false ? null : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", { onClick: () => {
                                  if (enableMagnifyingGlass) {
                                    initMagnifyingGlass();
                                  }
                                  if (zoomReferences.current[zoomIdx] != null) {
                                    zoomReferences.current[zoomIdx].zoomIn();
                                  }
                                  setZoomedIn(true);
                                }, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_react_bootstrap_icons.ZoomIn,
                                  {
                                    size: 24,
                                    color: iconColor ? iconColor : void 0,
                                    className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                    style: iconColor ? { color: iconColor } : {}
                                  }
                                ) }) }),
                                disableZoom || displayMagnificationIcons == false ? null : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "button",
                                  {
                                    onClick: () => {
                                      zoomReferences.current[zoomIdx].zoomOut();
                                      let scale = zoomReferences.current[zoomIdx].state.scale;
                                      if (scale == 1 || scale == 1.65) {
                                        setZoomedIn(false);
                                      }
                                    },
                                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_react_bootstrap_icons.ZoomOut,
                                      {
                                        size: 24,
                                        className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                        style: iconColor ? { color: iconColor } : {},
                                        color: iconColor ? iconColor : void 0
                                      }
                                    )
                                  }
                                ) }),
                                displayDownloadBtn() ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "button",
                                  {
                                    onClick: () => {
                                      saveImage();
                                    },
                                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_react_bootstrap_icons.Download,
                                      {
                                        size: 24,
                                        className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                        style: iconColor ? { color: iconColor } : {},
                                        color: iconColor ? iconColor : void 0
                                      }
                                    )
                                  }
                                ) : null,
                                displayFullScreenIcon ? isBrowserFullScreen ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "button",
                                  {
                                    onClick: () => {
                                      isBrowserFullScreen ? exitFullScreen() : fullScreen();
                                    },
                                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_react_bootstrap_icons.FullscreenExit,
                                      {
                                        size: 24,
                                        className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                        style: iconColor ? { color: iconColor } : {},
                                        color: iconColor ? iconColor : void 0
                                      }
                                    )
                                  }
                                ) }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", { onClick: () => {
                                  isBrowserFullScreen ? exitFullScreen() : fullScreen();
                                }, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_react_bootstrap_icons.Fullscreen,
                                  {
                                    size: 24,
                                    className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                    style: iconColor ? { color: iconColor } : {},
                                    color: iconColor ? iconColor : void 0
                                  }
                                ) }) }) : null,
                                isMobile && displayImgMetadata ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", { onClick: () => {
                                  setShowImgMetadataPanel(!showImgMetadataPanel);
                                  setDisplayLoader(false);
                                }, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_react_bootstrap_icons.InfoCircle,
                                  {
                                    size: 24,
                                    className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                    style: iconColor ? { color: iconColor } : {},
                                    color: iconColor ? iconColor : void 0
                                  }
                                ) }) }) : null,
                                rotateImgIcon ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "button",
                                  {
                                    onClick: () => {
                                      rotateImage();
                                    },
                                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_react_bootstrap_icons.ArrowClockwise,
                                      {
                                        size: 24,
                                        className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                        style: iconColor ? { color: iconColor } : {},
                                        color: iconColor ? iconColor : void 0
                                      }
                                    )
                                  }
                                ) }) : null,
                                displayThumbnailIcon ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "button",
                                  {
                                    onClick: () => {
                                      setShowThumbnails(!showThumbnails);
                                      setFullImg(!fullImg);
                                    },
                                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_react_bootstrap_icons.GridFill,
                                      {
                                        size: 24,
                                        className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                        style: iconColor ? { color: iconColor } : {},
                                        color: iconColor ? iconColor : void 0
                                      }
                                    )
                                  }
                                ) }) : null,
                                shouldDisplayMagnifyingGlassIcon() ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "button",
                                  {
                                    onClick: () => initMagnifyingGlass(),
                                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_react_bootstrap_icons.Search,
                                      {
                                        size: 24,
                                        className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                        style: iconColor ? { color: iconColor } : {},
                                        color: iconColor ? iconColor : void 0
                                      }
                                    )
                                  }
                                ) }) : null,
                                shouldDisplaySlideshowIcon() ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { className: SlideshowLightbox_module_css_default.slideshowPlayBtn, children: isSlideshowPlaying ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", { onClick: () => {
                                  isSlideshowPlaying ? stopSlideshow() : playSlideshow();
                                }, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_react_bootstrap_icons.PauseCircleFill,
                                  {
                                    size: 24,
                                    className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                    style: iconColor ? { color: iconColor } : {},
                                    color: iconColor ? iconColor : void 0
                                  }
                                ) }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", { onClick: () => {
                                  isSlideshowPlaying ? stopSlideshow() : playSlideshow();
                                }, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_react_bootstrap_icons.PlayCircleFill,
                                  {
                                    size: 24,
                                    className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                    style: iconColor ? { color: iconColor } : {},
                                    color: iconColor ? iconColor : void 0
                                  }
                                ) }) }) : null,
                                customControlComponent ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { children: customControlComponent }) : null
                              ] }),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.motion.div, { className: `${SlideshowLightbox_module_css_default.closeIcon} ${props.showControls == false ? SlideshowLightbox_module_css_default.mlAuto : ""}`, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "button",
                                {
                                  id: "closeBtn",
                                  className: `${props.showControlsBar == false && props.showControls == false ? SlideshowLightbox_module_css_default.closeButtonRounded : SlideshowLightbox_module_css_default.closeButton}`,
                                  onClick: () => {
                                    closeModal();
                                  },
                                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    import_react_bootstrap_icons.XLg,
                                    {
                                      id: "closeIcon",
                                      size: 24,
                                      className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                      color: iconColor ? iconColor : void 0,
                                      style: getCloseIconBtnStyle()
                                    }
                                  )
                                }
                              ) })
                            ]
                          }
                        ),
                        displayArrows() ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            "div",
                            {
                              className: rightArrowStyle ? `${SlideshowLightbox_module_css_default.next1} ${getArrowStyle()} imageModal` : "imageModal",
                              style: rightArrowStyle,
                              onClick: () => {
                                nextSlide();
                              },
                              children: nextArrowElem ? nextArrowElem : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: `${props.rightArrowClassname ? props.rightArrowClassname : ""}`, children: "\u276F" })
                            }
                          ),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            "div",
                            {
                              className: leftArrowStyle ? `${SlideshowLightbox_module_css_default.prev1} ${getArrowStyle()} imageModal ${displayImgMetadata ? SlideshowLightbox_module_css_default.prev1Metadata : ""}` : "imageModal",
                              style: leftArrowStyle,
                              onClick: () => {
                                prevSlide();
                              },
                              children: prevArrowElem ? prevArrowElem : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: `${props.leftArrowClassname ? props.leftArrowClassname : ""}`, children: "\u276E" })
                            }
                          )
                        ] }) : null,
                        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_framer_motion.AnimatePresence, { initial: false, custom: direction, children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                            "div",
                            {
                              className: `${getInnerContainerStyles()} ${SlideshowLightbox_module_css_default.embla} 
                        ${isImageCaption("below") && showControlsBar == true ? SlideshowLightbox_module_css_default.slideImageAndCaption : ""} 
                          ${props.fullScreen ? "" : SlideshowLightbox_module_css_default.slideshowInnerContainer} 
                          ${props.showControlsBar == false || props.fullScreen ? SlideshowLightbox_module_css_default.hideControlsBar : ""}
                          ${displayImgMetadata ? SlideshowLightbox_module_css_default.slideshowInnerContainerImgMetadata : ""}  `,
                              style: getContainerStyles(),
                              children: [
                                shouldDisplayMetadataPanel() ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "div",
                                  {
                                    className: SlideshowLightbox_module_css_default.metadata,
                                    style: getMetadataPanelStyle(),
                                    children: isLoading ? null : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: SlideshowLightbox_module_css_default.metadataInnerContainer, children: [
                                      getMetadataPanel(),
                                      isMobile && showImgMetadataPanel ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                        "button",
                                        {
                                          className: SlideshowLightbox_module_css_default.imgMetadataCloseBtn,
                                          onClick: () => {
                                            setShowImgMetadataPanel(false);
                                          },
                                          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                            import_react_bootstrap_icons.XLg,
                                            {
                                              size: 24,
                                              className: `${SlideshowLightbox_module_css_default.lightboxjsIcon} ${iconColor ? "" : getIconStyle()}`,
                                              color: iconColor ? iconColor : void 0,
                                              style: iconColor ? { color: iconColor } : {}
                                            }
                                          )
                                        }
                                      ) : null
                                    ] })
                                  }
                                ) : null,
                                isImageCaption("above") ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: `${SlideshowLightbox_module_css_default.imgTitleContainer} imageModal`, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "p",
                                  {
                                    className: `${SlideshowLightbox_module_css_default.imgTitle}`,
                                    style: props.captionStyle ? props.captionStyle : { color: textColor },
                                    children: getImageCaption()
                                  },
                                  "imgCaption" + slideIndex
                                ) }) : null,
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "div",
                                  {
                                    className: `${SlideshowLightbox_module_css_default.emblaViewport} 
                            ${displayImgMetadata ? SlideshowLightbox_module_css_default.emblaContainerImgMetadata : ""}`,
                                    style: props.fullScreen == true ? { height: lightboxModalHeight } : {},
                                    ref: showModal ? emblaRef : null,
                                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: `
                          ${getImgFadeClass()}
                          ${SlideshowLightbox_module_css_default.emblaContainer}
                            ${displayImgMetadata ? SlideshowLightbox_module_css_default.emblaContainerImgMetadata : ""}`, children: regularImgPaneNodes })
                                  }
                                )
                              ]
                            }
                          ),
                          displayLoader == true && !isHTMLVideo(slideIndex) ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            "span",
                            {
                              className: `${SlideshowLightbox_module_css_default.loader} ${getLoaderThemeClass()}`
                            },
                            "loader"
                          ) : null
                        ] }),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                          "div",
                          {
                            className: `${SlideshowLightbox_module_css_default.thumbnailsOuterContainer} ${isImageCaption("below") ? SlideshowLightbox_module_css_default.thumbnailsAndCaption : ""}
                      ${displayImgMetadata ? SlideshowLightbox_module_css_default.thumbnailsOuterContainerMetadata : ""} `,
                            style: getThumbnailsOuterContainerStyle(),
                            children: [
                              isImageCaption("below") ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: `${SlideshowLightbox_module_css_default.imgTitleContainer} imageModal`, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "p",
                                {
                                  className: `${SlideshowLightbox_module_css_default.imgTitle}`,
                                  style: props.captionStyle ? props.captionStyle : { color: textColor },
                                  children: getImageCaption()
                                },
                                "imgCaption" + slideIndex
                              ) }) : null,
                              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_framer_motion.AnimatePresence, { initial: animatedThumbnails, children: [
                                showThumbnails !== false && navigationDots !== true && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_framer_motion.motion.div,
                                  {
                                    initial: "hidden",
                                    exit: "hidden",
                                    animate: "visible",
                                    style: imagesLoaded ? {} : { display: "displayHidden" },
                                    transition: {
                                      type: "spring",
                                      duration: 0.75
                                    },
                                    variants: thumbnailVariants,
                                    className: `${SlideshowLightbox_module_css_default.thumbnails} ${isImageCaption("below") ? SlideshowLightbox_module_css_default.thumbnailsWithCaption : ""}`,
                                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: `${SlideshowLightbox_module_css_default.emblaThumbs} ${SlideshowLightbox_module_css_default.thumbnails}`, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: SlideshowLightbox_module_css_default.emblaThumbsViewport, ref: emblaThumbsRef, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: SlideshowLightbox_module_css_default.emblaThumbsContainer, children: frameworkID == "next" && props.images ? props.images.map((img, index) => getImageThumbnail(img, index, true, props)) : (
                                      // Not Next.js
                                      images.map((img, index) => getImageThumbnail(img, index, false, props))
                                    ) }) }) })
                                  }
                                ),
                                showThumbnails !== true && navigationDots !== false && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_framer_motion.motion.div,
                                  {
                                    initial: "hidden",
                                    exit: "hidden",
                                    animate: "visible",
                                    style: imagesLoaded ? {} : { display: "displayHidden" },
                                    transition: {
                                      type: "spring",
                                      duration: 0.75
                                    },
                                    variants: thumbnailVariants,
                                    className: `${SlideshowLightbox_module_css_default.thumbnails} ${isImageCaption("below") ? SlideshowLightbox_module_css_default.thumbnailsWithCaption : ""}`,
                                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: `${SlideshowLightbox_module_css_default.emblathumbs} ${SlideshowLightbox_module_css_default.thumbnails}`, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: SlideshowLightbox_module_css_default.emblaThumbsViewport, ref: emblaThumbsRef, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: `${SlideshowLightbox_module_css_default.navigationDots} ${SlideshowLightbox_module_css_default.emblaThumbsContainer} imageModal
                                `, children: frameworkID == "next" && props.images ? props.images.map((img, index) => getNavigationDot(index)) : (
                                      // Not Next.js
                                      images.map((img, index) => getNavigationDot(index))
                                    ) }) }) })
                                  }
                                )
                              ] })
                            ]
                          }
                        )
                      ]
                    }
                  )
                },
                "slideshowAnimContainer"
              ),
              props.rightSidebarComponent ? props.rightSidebarComponent : null
            ]
          }
        ),
        props.lightboxFooterComponent ? props.lightboxFooterComponent : null
      ] }) }) })
    ] });
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SlideshowLightbox
});
//# sourceMappingURL=SlideshowLightbox.js.map